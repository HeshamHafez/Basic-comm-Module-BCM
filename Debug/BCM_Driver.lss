
BCM_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002478  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  00002478  0000250c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  008000e6  008000e6  00002592  2**0
                  ALLOC
  3 .stab         000026d0  00000000  00000000  00002594  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001559  00000000  00000000  00004c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000061bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000062fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000646d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000080b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009d50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a13d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a90b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <__vector_13>
      38:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3e       	cpi	r26, 0xE6	; 230
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ee       	ldi	r26, 0xE6	; 230
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 30       	cpi	r26, 0x05	; 5
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <main>
      8a:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ed       	ldi	r26, 0xD0	; 208
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 ed       	ldi	r24, 0xD0	; 208
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BCM_Init>:
 * Outputs:			NULL
 *
 * Return:			Status to check function execution
 *******************************************************************************/
EnmBCMstatus_t BCM_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <BCM_Init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	/*return value*/
	EnmBCMstatus_t ReturnVal;
	/*initialization of UART communication protocol*/
	Status_t UART_Init_check =	UART_Init();
     b50:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <UART_Init>
     b54:	89 83       	std	Y+1, r24	; 0x01
	/*if initialization succeeded*/
	if(UART_Init_check == OK)
     b56:	89 81       	ldd	r24, Y+1	; 0x01
     b58:	81 30       	cpi	r24, 0x01	; 1
     b5a:	11 f4       	brne	.+4      	; 0xb60 <BCM_Init+0x1a>
	{
		ReturnVal = BCM_OK;
     b5c:	1a 82       	std	Y+2, r1	; 0x02
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <BCM_Init+0x1e>
	}
	/*if initialization failed*/
	else
	{
		ReturnVal = BCM_NOT_OK;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	8a 83       	std	Y+2, r24	; 0x02
	}
	/*start of UART communication protocol*/
	UART_Init_check = UART_StartComm();
     b64:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <UART_StartComm>
     b68:	89 83       	std	Y+1, r24	; 0x01
	/*if UART start succeeded*/
	if(UART_Init_check == OK)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	11 f4       	brne	.+4      	; 0xb74 <BCM_Init+0x2e>
	{
		ReturnVal = BCM_OK;
     b70:	1a 82       	std	Y+2, r1	; 0x02
     b72:	02 c0       	rjmp	.+4      	; 0xb78 <BCM_Init+0x32>
	}
	/*if start UART failed*/
	else
	{
		ReturnVal = BCM_NOT_OK;
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(ReturnVal ==  BCM_OK)
     b78:	8a 81       	ldd	r24, Y+2	; 0x02
     b7a:	88 23       	and	r24, r24
     b7c:	c1 f5       	brne	.+112    	; 0xbee <BCM_Init+0xa8>
	{
		/*TX Data Buffer*/
		BCM_Tx_Buffer.DataPtr = NULL_PTR;
     b7e:	10 92 ea 00 	sts	0x00EA, r1
     b82:	10 92 e9 00 	sts	0x00E9, r1

		/*RX Data Buffer*/
		BCM_Rx_Buffer.DataPtr = NULL_PTR;
     b86:	10 92 ee 00 	sts	0x00EE, r1
     b8a:	10 92 ed 00 	sts	0x00ED, r1

		/*Initialize Tx checksum value*/
		BCM_Tx_Info.CheckSum = 0u;
     b8e:	10 92 f5 00 	sts	0x00F5, r1

		/*Initialize Tx Array Size value*/
		BCM_Tx_Buffer.ArraySize = 0u;
     b92:	10 92 e8 00 	sts	0x00E8, r1
     b96:	10 92 e7 00 	sts	0x00E7, r1

		/*Initialize Tx Index value*/
		BCM_Tx_Info.Index = 0u;
     b9a:	10 92 f2 00 	sts	0x00F2, r1
     b9e:	10 92 f1 00 	sts	0x00F1, r1

		/*Initialize Tx FailIndex value*/
		BCM_Tx_Info.FailIndex = (sint16)(-1);
     ba2:	8f ef       	ldi	r24, 0xFF	; 255
     ba4:	9f ef       	ldi	r25, 0xFF	; 255
     ba6:	90 93 f4 00 	sts	0x00F4, r25
     baa:	80 93 f3 00 	sts	0x00F3, r24

		/*Initialize Rx checksum value*/
		BCM_Rx_Info.CheckSum = 0u;
     bae:	10 92 fb 00 	sts	0x00FB, r1

		/*Initialize Rx Array Size value*/
		BCM_Rx_Buffer.ArraySize = 0u;
     bb2:	10 92 ec 00 	sts	0x00EC, r1
     bb6:	10 92 eb 00 	sts	0x00EB, r1

		/*Initialize Rx Index value*/
		BCM_Rx_Info.Index = 0u;
     bba:	10 92 f8 00 	sts	0x00F8, r1
     bbe:	10 92 f7 00 	sts	0x00F7, r1

		/*Initialize Rx FailIndex value*/
		BCM_Rx_Info.FailIndex = (sint16)(-1);
     bc2:	8f ef       	ldi	r24, 0xFF	; 255
     bc4:	9f ef       	ldi	r25, 0xFF	; 255
     bc6:	90 93 fa 00 	sts	0x00FA, r25
     bca:	80 93 f9 00 	sts	0x00F9, r24

		/*Initialize Tx Dispatcher State*/
		Dispatch_TX_Status = TX_IDLE;
     bce:	10 92 fc 00 	sts	0x00FC, r1

		/*Initialize Rx Dispatcher State*/
		Dispatch_RX_Status = RX_IDLE;
     bd2:	10 92 fd 00 	sts	0x00FD, r1

		/*Call Back Functions Initialization*/
		UART_Config.UART_Rx_CallBack_Function = UART_RxCallbackFunction;
     bd6:	84 ea       	ldi	r24, 0xA4	; 164
     bd8:	98 e0       	ldi	r25, 0x08	; 8
     bda:	90 93 e4 00 	sts	0x00E4, r25
     bde:	80 93 e3 00 	sts	0x00E3, r24
		UART_Config.UART_Tx_CallBack_Function = UART_TxCallbackFunction;
     be2:	86 e9       	ldi	r24, 0x96	; 150
     be4:	98 e0       	ldi	r25, 0x08	; 8
     be6:	90 93 e2 00 	sts	0x00E2, r25
     bea:	80 93 e1 00 	sts	0x00E1, r24
	else
	{
		/*Do Nothing*/
	}

	return ReturnVal;
     bee:	8a 81       	ldd	r24, Y+2	; 0x02
}
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	cf 91       	pop	r28
     bf6:	df 91       	pop	r29
     bf8:	08 95       	ret

00000bfa <BCM_Send>:
 * Outputs:			NULL
 *
 * Return:			Status to check function execution
 *******************************************************************************/
EnmBCMstatus_t BCM_Send(uint8 * a_Data_Ptr, uint16 a_size)
{
     bfa:	df 93       	push	r29
     bfc:	cf 93       	push	r28
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <BCM_Send+0x6>
     c00:	00 d0       	rcall	.+0      	; 0xc02 <BCM_Send+0x8>
     c02:	0f 92       	push	r0
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	9b 83       	std	Y+3, r25	; 0x03
     c0a:	8a 83       	std	Y+2, r24	; 0x02
     c0c:	7d 83       	std	Y+5, r23	; 0x05
     c0e:	6c 83       	std	Y+4, r22	; 0x04

	/*return value*/
	EnmBCMstatus_t ReturnVal;

	/*if BCM driver in idle mode*/
	if(Dispatch_TX_Status == TX_IDLE)
     c10:	80 91 fc 00 	lds	r24, 0x00FC
     c14:	88 23       	and	r24, r24
     c16:	e9 f4       	brne	.+58     	; 0xc52 <BCM_Send+0x58>
	{
		/*assign address of data array*/
		BCM_Tx_Buffer.DataPtr = a_Data_Ptr;
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	9b 81       	ldd	r25, Y+3	; 0x03
     c1c:	90 93 ea 00 	sts	0x00EA, r25
     c20:	80 93 e9 00 	sts	0x00E9, r24
		/*assign size*/
		BCM_Tx_Buffer.ArraySize = a_size;
     c24:	8c 81       	ldd	r24, Y+4	; 0x04
     c26:	9d 81       	ldd	r25, Y+5	; 0x05
     c28:	90 93 e8 00 	sts	0x00E8, r25
     c2c:	80 93 e7 00 	sts	0x00E7, r24

		/*initializing Tx header*/
		BCM_Tx_Info.Index = 0u;
     c30:	10 92 f2 00 	sts	0x00F2, r1
     c34:	10 92 f1 00 	sts	0x00F1, r1
		BCM_Tx_Info.CheckSum = 0u;
     c38:	10 92 f5 00 	sts	0x00F5, r1
		BCM_Tx_Info.FailIndex = ((sint8)(-1));
     c3c:	8f ef       	ldi	r24, 0xFF	; 255
     c3e:	9f ef       	ldi	r25, 0xFF	; 255
     c40:	90 93 f4 00 	sts	0x00F4, r25
     c44:	80 93 f3 00 	sts	0x00F3, r24

		/*Changing to sending mode*/
		Dispatch_TX_Status = SENDING_FRAME_IN_PROGRESS;
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	80 93 fc 00 	sts	0x00FC, r24
		ReturnVal = BCM_OK;
     c4e:	19 82       	std	Y+1, r1	; 0x01
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <BCM_Send+0x5c>
	}
	else
	{
		ReturnVal = BCM_BUSY;
     c52:	82 e0       	ldi	r24, 0x02	; 2
     c54:	89 83       	std	Y+1, r24	; 0x01
	}

	return ReturnVal;
     c56:	89 81       	ldd	r24, Y+1	; 0x01
}
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	cf 91       	pop	r28
     c64:	df 91       	pop	r29
     c66:	08 95       	ret

00000c68 <BCM_TxDispatch>:
 * Outputs:			NULL
 *
 * Return:			Status to check function execution
 *******************************************************************************/
EnmBCMstatus_t BCM_TxDispatch(void)
{
     c68:	df 93       	push	r29
     c6a:	cf 93       	push	r28
     c6c:	00 d0       	rcall	.+0      	; 0xc6e <BCM_TxDispatch+0x6>
     c6e:	00 d0       	rcall	.+0      	; 0xc70 <BCM_TxDispatch+0x8>
     c70:	00 d0       	rcall	.+0      	; 0xc72 <BCM_TxDispatch+0xa>
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
	Status_t UART_status = NOT_OK;
     c76:	1a 82       	std	Y+2, r1	; 0x02
	static EnmBCM_SendingFrameStatus_t SendingFrameStatus = SENDING_SIZE;
	/*return value*/
	EnmBCMstatus_t ReturnVal;
	//	static EnmBCM_SendingFrameStatus_t SendingFrameStatus = SENDING_SIZE;
	/*switch between Tx Dispatch Modes*/
	switch (Dispatch_TX_Status)
     c78:	80 91 fc 00 	lds	r24, 0x00FC
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	3e 83       	std	Y+6, r19	; 0x06
     c82:	2d 83       	std	Y+5, r18	; 0x05
     c84:	8d 81       	ldd	r24, Y+5	; 0x05
     c86:	9e 81       	ldd	r25, Y+6	; 0x06
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	09 f4       	brne	.+2      	; 0xc8e <BCM_TxDispatch+0x26>
     c8c:	e6 c0       	rjmp	.+460    	; 0xe5a <BCM_TxDispatch+0x1f2>
     c8e:	2d 81       	ldd	r18, Y+5	; 0x05
     c90:	3e 81       	ldd	r19, Y+6	; 0x06
     c92:	21 30       	cpi	r18, 0x01	; 1
     c94:	31 05       	cpc	r19, r1
     c96:	09 f0       	breq	.+2      	; 0xc9a <BCM_TxDispatch+0x32>
     c98:	e0 c0       	rjmp	.+448    	; 0xe5a <BCM_TxDispatch+0x1f2>
		break;

		/*Sending Frame "Header and Data" Mode*/
	case SENDING_FRAME_IN_PROGRESS:
		/*switch between sending size or sending Data*/
		switch(SendingFrameStatus)
     c9a:	80 91 01 01 	lds	r24, 0x0101
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	3c 83       	std	Y+4, r19	; 0x04
     ca4:	2b 83       	std	Y+3, r18	; 0x03
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	9c 81       	ldd	r25, Y+4	; 0x04
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	91 05       	cpc	r25, r1
     cae:	09 f4       	brne	.+2      	; 0xcb2 <BCM_TxDispatch+0x4a>
     cb0:	67 c0       	rjmp	.+206    	; 0xd80 <BCM_TxDispatch+0x118>
     cb2:	2b 81       	ldd	r18, Y+3	; 0x03
     cb4:	3c 81       	ldd	r19, Y+4	; 0x04
     cb6:	22 30       	cpi	r18, 0x02	; 2
     cb8:	31 05       	cpc	r19, r1
     cba:	2c f4       	brge	.+10     	; 0xcc6 <BCM_TxDispatch+0x5e>
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	9c 81       	ldd	r25, Y+4	; 0x04
     cc0:	00 97       	sbiw	r24, 0x00	; 0
     cc2:	71 f0       	breq	.+28     	; 0xce0 <BCM_TxDispatch+0x78>
     cc4:	ca c0       	rjmp	.+404    	; 0xe5a <BCM_TxDispatch+0x1f2>
     cc6:	2b 81       	ldd	r18, Y+3	; 0x03
     cc8:	3c 81       	ldd	r19, Y+4	; 0x04
     cca:	22 30       	cpi	r18, 0x02	; 2
     ccc:	31 05       	cpc	r19, r1
     cce:	09 f4       	brne	.+2      	; 0xcd2 <BCM_TxDispatch+0x6a>
     cd0:	a3 c0       	rjmp	.+326    	; 0xe18 <BCM_TxDispatch+0x1b0>
     cd2:	8b 81       	ldd	r24, Y+3	; 0x03
     cd4:	9c 81       	ldd	r25, Y+4	; 0x04
     cd6:	83 30       	cpi	r24, 0x03	; 3
     cd8:	91 05       	cpc	r25, r1
     cda:	09 f4       	brne	.+2      	; 0xcde <BCM_TxDispatch+0x76>
     cdc:	b8 c0       	rjmp	.+368    	; 0xe4e <BCM_TxDispatch+0x1e6>
     cde:	bd c0       	rjmp	.+378    	; 0xe5a <BCM_TxDispatch+0x1f2>
		{
		case SENDING_SIZE:
			/*check the index of the Tx info Buffer*/
			if(BCM_Tx_Info.Index == 0u)
     ce0:	80 91 f1 00 	lds	r24, 0x00F1
     ce4:	90 91 f2 00 	lds	r25, 0x00F2
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	01 f5       	brne	.+64     	; 0xd2c <BCM_TxDispatch+0xc4>
			{
				/*send first byte of the size*/
				UART_status = UART_SendChar((BCM_Tx_Buffer.ArraySize) & (0x00ffu));
     cec:	80 91 e7 00 	lds	r24, 0x00E7
     cf0:	90 91 e8 00 	lds	r25, 0x00E8
     cf4:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <UART_SendChar>
     cf8:	8a 83       	std	Y+2, r24	; 0x02
				/*check if sending data failed*/
				if(UART_status == NOT_OK)
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	88 23       	and	r24, r24
     cfe:	61 f4       	brne	.+24     	; 0xd18 <BCM_TxDispatch+0xb0>
				{
					BCM_Tx_Info.FailIndex = ((BCM_Tx_Info.Index));
     d00:	80 91 f1 00 	lds	r24, 0x00F1
     d04:	90 91 f2 00 	lds	r25, 0x00F2
     d08:	90 93 f4 00 	sts	0x00F4, r25
     d0c:	80 93 f3 00 	sts	0x00F3, r24
					/*switch to Tx idle mode*/
					Dispatch_TX_Status = TX_IDLE;
     d10:	10 92 fc 00 	sts	0x00FC, r1
					ReturnVal = BCM_SEND_FAIL;
     d14:	84 e0       	ldi	r24, 0x04	; 4
     d16:	89 83       	std	Y+1, r24	; 0x01
				else
				{
					/* Do nothing*/
				}

				(BCM_Tx_Info.Index)++;
     d18:	80 91 f1 00 	lds	r24, 0x00F1
     d1c:	90 91 f2 00 	lds	r25, 0x00F2
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	90 93 f2 00 	sts	0x00F2, r25
     d26:	80 93 f1 00 	sts	0x00F1, r24
     d2a:	26 c0       	rjmp	.+76     	; 0xd78 <BCM_TxDispatch+0x110>
			}

			else if(BCM_Tx_Info.Index == 1u)
     d2c:	80 91 f1 00 	lds	r24, 0x00F1
     d30:	90 91 f2 00 	lds	r25, 0x00F2
     d34:	81 30       	cpi	r24, 0x01	; 1
     d36:	91 05       	cpc	r25, r1
     d38:	f9 f4       	brne	.+62     	; 0xd78 <BCM_TxDispatch+0x110>
			{
				/*send second byte of the size*/
				UART_status = UART_SendChar((((BCM_Tx_Buffer.ArraySize) & (0xff00u))>> 8u));
     d3a:	80 91 e7 00 	lds	r24, 0x00E7
     d3e:	90 91 e8 00 	lds	r25, 0x00E8
     d42:	89 2f       	mov	r24, r25
     d44:	99 27       	eor	r25, r25
     d46:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <UART_SendChar>
     d4a:	8a 83       	std	Y+2, r24	; 0x02

				/*check if sending data failed*/
				if(UART_status == NOT_OK)
     d4c:	8a 81       	ldd	r24, Y+2	; 0x02
     d4e:	88 23       	and	r24, r24
     d50:	61 f4       	brne	.+24     	; 0xd6a <BCM_TxDispatch+0x102>
				{
					BCM_Tx_Info.FailIndex = ((BCM_Tx_Info.Index));
     d52:	80 91 f1 00 	lds	r24, 0x00F1
     d56:	90 91 f2 00 	lds	r25, 0x00F2
     d5a:	90 93 f4 00 	sts	0x00F4, r25
     d5e:	80 93 f3 00 	sts	0x00F3, r24
					/*switch to Tx idle mode*/
					Dispatch_TX_Status = TX_IDLE;
     d62:	10 92 fc 00 	sts	0x00FC, r1
					ReturnVal = BCM_SEND_FAIL;
     d66:	84 e0       	ldi	r24, 0x04	; 4
     d68:	89 83       	std	Y+1, r24	; 0x01
				{
					/* Do nothing*/
				}

				/*Reset Index value*/
				BCM_Tx_Info.Index = 0u;
     d6a:	10 92 f2 00 	sts	0x00F2, r1
     d6e:	10 92 f1 00 	sts	0x00F1, r1

				/*switch to case : sending data */
				SendingFrameStatus = SENDING_DATA;
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	80 93 01 01 	sts	0x0101, r24
			}

			Dispatch_TX_Status = SENDING_Byte_IN_PROGRESS;
     d78:	82 e0       	ldi	r24, 0x02	; 2
     d7a:	80 93 fc 00 	sts	0x00FC, r24
     d7e:	6d c0       	rjmp	.+218    	; 0xe5a <BCM_TxDispatch+0x1f2>
			break;

		case SENDING_DATA:

			/*calculate checksum*/
			BCM_Tx_Info.CheckSum += BCM_Tx_Buffer.DataPtr[BCM_Tx_Info.Index];
     d80:	40 91 f5 00 	lds	r20, 0x00F5
     d84:	20 91 e9 00 	lds	r18, 0x00E9
     d88:	30 91 ea 00 	lds	r19, 0x00EA
     d8c:	80 91 f1 00 	lds	r24, 0x00F1
     d90:	90 91 f2 00 	lds	r25, 0x00F2
     d94:	f9 01       	movw	r30, r18
     d96:	e8 0f       	add	r30, r24
     d98:	f9 1f       	adc	r31, r25
     d9a:	80 81       	ld	r24, Z
     d9c:	84 0f       	add	r24, r20
     d9e:	80 93 f5 00 	sts	0x00F5, r24
			BCM_Tx_Info.Index++;
     da2:	80 91 f1 00 	lds	r24, 0x00F1
     da6:	90 91 f2 00 	lds	r25, 0x00F2
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	90 93 f2 00 	sts	0x00F2, r25
     db0:	80 93 f1 00 	sts	0x00F1, r24
			/*check if the index of Tx info buffer equal to array size*/
			if(BCM_Tx_Info.Index == ((BCM_Tx_Buffer.ArraySize)))
     db4:	20 91 f1 00 	lds	r18, 0x00F1
     db8:	30 91 f2 00 	lds	r19, 0x00F2
     dbc:	80 91 e7 00 	lds	r24, 0x00E7
     dc0:	90 91 e8 00 	lds	r25, 0x00E8
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	19 f4       	brne	.+6      	; 0xdd0 <BCM_TxDispatch+0x168>
			{
				/*switch to case sending checksum*/
				SendingFrameStatus = SENDING_CHECKSUM;
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	80 93 01 01 	sts	0x0101, r24
			}

			/*sending data*/
			UART_status=UART_SendChar(*(BCM_Tx_Buffer.DataPtr + (BCM_Tx_Info.Index - 1u)));
     dd0:	20 91 e9 00 	lds	r18, 0x00E9
     dd4:	30 91 ea 00 	lds	r19, 0x00EA
     dd8:	80 91 f1 00 	lds	r24, 0x00F1
     ddc:	90 91 f2 00 	lds	r25, 0x00F2
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	f9 01       	movw	r30, r18
     de4:	e8 0f       	add	r30, r24
     de6:	f9 1f       	adc	r31, r25
     de8:	80 81       	ld	r24, Z
     dea:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <UART_SendChar>
     dee:	8a 83       	std	Y+2, r24	; 0x02

			/*check if sending data failed*/
			if(UART_status == NOT_OK)
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	88 23       	and	r24, r24
     df4:	69 f4       	brne	.+26     	; 0xe10 <BCM_TxDispatch+0x1a8>
			{
				BCM_Tx_Info.FailIndex = ((BCM_Tx_Info.Index) - 1u);
     df6:	80 91 f1 00 	lds	r24, 0x00F1
     dfa:	90 91 f2 00 	lds	r25, 0x00F2
     dfe:	01 97       	sbiw	r24, 0x01	; 1
     e00:	90 93 f4 00 	sts	0x00F4, r25
     e04:	80 93 f3 00 	sts	0x00F3, r24
				/*switch to Tx idle mode*/
				Dispatch_TX_Status = TX_IDLE;
     e08:	10 92 fc 00 	sts	0x00FC, r1
				ReturnVal = BCM_SEND_FAIL;
     e0c:	84 e0       	ldi	r24, 0x04	; 4
     e0e:	89 83       	std	Y+1, r24	; 0x01
			else
			{
				/* Do nothing*/
			}
			/*switch to SENDING_Byte_IN_PROGRESS mode*/
			Dispatch_TX_Status = SENDING_Byte_IN_PROGRESS;
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	80 93 fc 00 	sts	0x00FC, r24
     e16:	21 c0       	rjmp	.+66     	; 0xe5a <BCM_TxDispatch+0x1f2>
			break;

		case SENDING_CHECKSUM:

			/*sending checksum value*/
			UART_status = UART_SendChar(BCM_Tx_Info.CheckSum);
     e18:	80 91 f5 00 	lds	r24, 0x00F5
     e1c:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <UART_SendChar>
     e20:	8a 83       	std	Y+2, r24	; 0x02

			/*check if sending Checksum failed*/
			if(UART_status == NOT_OK)
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	88 23       	and	r24, r24
     e26:	61 f4       	brne	.+24     	; 0xe40 <BCM_TxDispatch+0x1d8>
			{
				BCM_Tx_Info.FailIndex = ((BCM_Tx_Info.Index));
     e28:	80 91 f1 00 	lds	r24, 0x00F1
     e2c:	90 91 f2 00 	lds	r25, 0x00F2
     e30:	90 93 f4 00 	sts	0x00F4, r25
     e34:	80 93 f3 00 	sts	0x00F3, r24
				/*switch to Tx idle mode*/
				Dispatch_TX_Status = TX_IDLE;
     e38:	10 92 fc 00 	sts	0x00FC, r1
				ReturnVal = BCM_SEND_FAIL;
     e3c:	84 e0       	ldi	r24, 0x04	; 4
     e3e:	89 83       	std	Y+1, r24	; 0x01
			else
			{
				/* Do nothing*/
			}
			/*switch to end sending frame*/
			SendingFrameStatus = END_SENDING_FRAME;
     e40:	83 e0       	ldi	r24, 0x03	; 3
     e42:	80 93 01 01 	sts	0x0101, r24
			/*switch to SENDING_Byte_IN_PROGRESS mode*/
			Dispatch_TX_Status = SENDING_Byte_IN_PROGRESS;
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	80 93 fc 00 	sts	0x00FC, r24
     e4c:	06 c0       	rjmp	.+12     	; 0xe5a <BCM_TxDispatch+0x1f2>
			break;

		case END_SENDING_FRAME:
			/*switch to case : sending data */
			SendingFrameStatus = SENDING_SIZE;
     e4e:	10 92 01 01 	sts	0x0101, r1
			ReturnVal = BCM_SEND_COMPLETE;
     e52:	83 e0       	ldi	r24, 0x03	; 3
     e54:	89 83       	std	Y+1, r24	; 0x01
			/*switch to Tx idle mode*/
			Dispatch_TX_Status = TX_IDLE;
     e56:	10 92 fc 00 	sts	0x00FC, r1

		default:
			/*Do nothing*/
			break;
	}
	return ReturnVal;
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e5c:	26 96       	adiw	r28, 0x06	; 6
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <BCM_SetupReceive>:
 * 					pointer to array size 	(uint16)
 *
 * Return:			Status to check function execution
 *******************************************************************************/
EnmBCMstatus_t BCM_SetupReceive(uint8 * a_Data_Ptr, uint16 * a_size)
{
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	00 d0       	rcall	.+0      	; 0xe74 <BCM_SetupReceive+0x6>
     e74:	00 d0       	rcall	.+0      	; 0xe76 <BCM_SetupReceive+0x8>
     e76:	0f 92       	push	r0
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	9b 83       	std	Y+3, r25	; 0x03
     e7e:	8a 83       	std	Y+2, r24	; 0x02
     e80:	7d 83       	std	Y+5, r23	; 0x05
     e82:	6c 83       	std	Y+4, r22	; 0x04
	/*return value*/
	EnmBCMstatus_t ReturnVal;
	/*if BCM driver in idle mode*/
	if(Dispatch_RX_Status == RX_IDLE)
     e84:	80 91 fd 00 	lds	r24, 0x00FD
     e88:	88 23       	and	r24, r24
     e8a:	e9 f4       	brne	.+58     	; 0xec6 <BCM_SetupReceive+0x58>
	{
		/*assign address of data array*/
		BCM_Rx_Buffer.DataPtr = a_Data_Ptr;
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	9b 81       	ldd	r25, Y+3	; 0x03
     e90:	90 93 ee 00 	sts	0x00EE, r25
     e94:	80 93 ed 00 	sts	0x00ED, r24

		/*assign address of the size of array*/
		BCM_Rx_Buffer.ArraySize =  a_size;
     e98:	8c 81       	ldd	r24, Y+4	; 0x04
     e9a:	9d 81       	ldd	r25, Y+5	; 0x05
     e9c:	90 93 ec 00 	sts	0x00EC, r25
     ea0:	80 93 eb 00 	sts	0x00EB, r24

		/*initializing Rx header*/
		BCM_Rx_Info.Index = 0u;
     ea4:	10 92 f8 00 	sts	0x00F8, r1
     ea8:	10 92 f7 00 	sts	0x00F7, r1
		BCM_Rx_Info.CheckSum = 0u;
     eac:	10 92 fb 00 	sts	0x00FB, r1
		BCM_Rx_Info.FailIndex = (sint8)(-1);
     eb0:	8f ef       	ldi	r24, 0xFF	; 255
     eb2:	9f ef       	ldi	r25, 0xFF	; 255
     eb4:	90 93 fa 00 	sts	0x00FA, r25
     eb8:	80 93 f9 00 	sts	0x00F9, r24

		/*Changing to receive mode*/
		Dispatch_RX_Status = RECEIVING_FRAME_IN_PROGRESS;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	80 93 fd 00 	sts	0x00FD, r24
		ReturnVal = BCM_OK;
     ec2:	19 82       	std	Y+1, r1	; 0x01
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <BCM_SetupReceive+0x5c>
	}
	else
	{
		ReturnVal = BCM_BUSY;
     ec6:	82 e0       	ldi	r24, 0x02	; 2
     ec8:	89 83       	std	Y+1, r24	; 0x01
	}

	return ReturnVal;
     eca:	89 81       	ldd	r24, Y+1	; 0x01
}
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <BCM_RxDispatch>:
 * Outputs:			NULL
 *
 * Return:			Status to check function execution
 *******************************************************************************/
EnmBCMstatus_t BCM_RxDispatch(void)
{
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <BCM_RxDispatch+0x6>
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <BCM_RxDispatch+0x8>
     ee4:	0f 92       	push	r0
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
	/*This value to be incremented while receiving bytes to compare it
	 *  with the checksum I receive at the end of the data stream*/
	static uint8 CheckSumCalculation = 0u;

	/*switch between Rx dispatch modes*/
	switch (Dispatch_RX_Status)
     eea:	80 91 fd 00 	lds	r24, 0x00FD
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	3d 83       	std	Y+5, r19	; 0x05
     ef4:	2c 83       	std	Y+4, r18	; 0x04
     ef6:	8c 81       	ldd	r24, Y+4	; 0x04
     ef8:	9d 81       	ldd	r25, Y+5	; 0x05
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	09 f4       	brne	.+2      	; 0xf00 <BCM_RxDispatch+0x24>
     efe:	c3 c0       	rjmp	.+390    	; 0x1086 <BCM_RxDispatch+0x1aa>
     f00:	2c 81       	ldd	r18, Y+4	; 0x04
     f02:	3d 81       	ldd	r19, Y+5	; 0x05
     f04:	21 30       	cpi	r18, 0x01	; 1
     f06:	31 05       	cpc	r19, r1
     f08:	09 f0       	breq	.+2      	; 0xf0c <BCM_RxDispatch+0x30>
     f0a:	bd c0       	rjmp	.+378    	; 0x1086 <BCM_RxDispatch+0x1aa>
		/*Do Nothing*/
		break;

	case RECEIVING_FRAME_IN_PROGRESS:
		/*switch between Receiving size or Receiving Data*/
		switch(ReceivingFrameStatus)
     f0c:	80 91 ff 00 	lds	r24, 0x00FF
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	3b 83       	std	Y+3, r19	; 0x03
     f16:	2a 83       	std	Y+2, r18	; 0x02
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	9b 81       	ldd	r25, Y+3	; 0x03
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	91 05       	cpc	r25, r1
     f20:	09 f4       	brne	.+2      	; 0xf24 <BCM_RxDispatch+0x48>
     f22:	57 c0       	rjmp	.+174    	; 0xfd2 <BCM_RxDispatch+0xf6>
     f24:	2a 81       	ldd	r18, Y+2	; 0x02
     f26:	3b 81       	ldd	r19, Y+3	; 0x03
     f28:	22 30       	cpi	r18, 0x02	; 2
     f2a:	31 05       	cpc	r19, r1
     f2c:	09 f4       	brne	.+2      	; 0xf30 <BCM_RxDispatch+0x54>
     f2e:	89 c0       	rjmp	.+274    	; 0x1042 <BCM_RxDispatch+0x166>
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	9b 81       	ldd	r25, Y+3	; 0x03
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	09 f0       	breq	.+2      	; 0xf3a <BCM_RxDispatch+0x5e>
     f38:	a6 c0       	rjmp	.+332    	; 0x1086 <BCM_RxDispatch+0x1aa>
		{
		case RECEIVING_SIZE:
			/*check the index of the Rx info Buffer*/
			if(BCM_Rx_Info.Index == 1u)
     f3a:	80 91 f7 00 	lds	r24, 0x00F7
     f3e:	90 91 f8 00 	lds	r25, 0x00F8
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	91 05       	cpc	r25, r1
     f46:	89 f4       	brne	.+34     	; 0xf6a <BCM_RxDispatch+0x8e>
			{
				/*check if receiving data failed*/
				if(UART_InterruptStatus == NOT_OK)
     f48:	80 91 fe 00 	lds	r24, 0x00FE
     f4c:	88 23       	and	r24, r24
     f4e:	21 f4       	brne	.+8      	; 0xf58 <BCM_RxDispatch+0x7c>
				{
					/*switching to idle Rx  mode*/
					Dispatch_RX_Status = RX_IDLE;
     f50:	10 92 fd 00 	sts	0x00FD, r1
					ReturnVal = BCM_RECEIVE_FAIL;
     f54:	86 e0       	ldi	r24, 0x06	; 6
     f56:	89 83       	std	Y+1, r24	; 0x01
				{
					/* Do nothing*/
				}

				/*assign first 8 bit of size to the receive size buffer*/
				u16ReceiveSizeBuffer = ReceiveSizeBuffer;
     f58:	80 91 00 01 	lds	r24, 0x0100
     f5c:	88 2f       	mov	r24, r24
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	90 93 04 01 	sts	0x0104, r25
     f64:	80 93 03 01 	sts	0x0103, r24
     f68:	30 c0       	rjmp	.+96     	; 0xfca <BCM_RxDispatch+0xee>
			}

			/*check the index of the Rx info Buffer*/
			else if(BCM_Rx_Info.Index == 2u)
     f6a:	80 91 f7 00 	lds	r24, 0x00F7
     f6e:	90 91 f8 00 	lds	r25, 0x00F8
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	91 05       	cpc	r25, r1
     f76:	49 f5       	brne	.+82     	; 0xfca <BCM_RxDispatch+0xee>
			{
				/*check if receiving data failed*/
				if(UART_InterruptStatus == NOT_OK)
     f78:	80 91 fe 00 	lds	r24, 0x00FE
     f7c:	88 23       	and	r24, r24
     f7e:	21 f4       	brne	.+8      	; 0xf88 <BCM_RxDispatch+0xac>
				{
					/*switching to idle Rx  mode*/
					Dispatch_RX_Status = RX_IDLE;
     f80:	10 92 fd 00 	sts	0x00FD, r1
					ReturnVal = BCM_RECEIVE_FAIL;
     f84:	86 e0       	ldi	r24, 0x06	; 6
     f86:	89 83       	std	Y+1, r24	; 0x01
				{
					/* Do nothing*/
				}

				/*assign second 8 bit of size to the receive size buffer*/
				u16ReceiveSizeBuffer |= (((uint16)ReceiveSizeBuffer)<<8u);
     f88:	80 91 00 01 	lds	r24, 0x0100
     f8c:	88 2f       	mov	r24, r24
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	38 2f       	mov	r19, r24
     f92:	22 27       	eor	r18, r18
     f94:	80 91 03 01 	lds	r24, 0x0103
     f98:	90 91 04 01 	lds	r25, 0x0104
     f9c:	82 2b       	or	r24, r18
     f9e:	93 2b       	or	r25, r19
     fa0:	90 93 04 01 	sts	0x0104, r25
     fa4:	80 93 03 01 	sts	0x0103, r24
				/*complete receiving buffer*/
				(*BCM_Rx_Buffer.ArraySize) = u16ReceiveSizeBuffer;
     fa8:	e0 91 eb 00 	lds	r30, 0x00EB
     fac:	f0 91 ec 00 	lds	r31, 0x00EC
     fb0:	80 91 03 01 	lds	r24, 0x0103
     fb4:	90 91 04 01 	lds	r25, 0x0104
     fb8:	91 83       	std	Z+1, r25	; 0x01
     fba:	80 83       	st	Z, r24

				/*Reset Index value*/
				BCM_Rx_Info.Index = 0u;
     fbc:	10 92 f8 00 	sts	0x00F8, r1
     fc0:	10 92 f7 00 	sts	0x00F7, r1

				/*switch to case : receiving data */
				ReceivingFrameStatus = RECEIVING_DATA;
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	80 93 ff 00 	sts	0x00FF, r24
			}

			/*switch to RECEIVING_Byte_IN_PROGRESS mode*/
			Dispatch_RX_Status = RECEIVING_Byte_IN_PROGRESS;
     fca:	82 e0       	ldi	r24, 0x02	; 2
     fcc:	80 93 fd 00 	sts	0x00FD, r24
     fd0:	5a c0       	rjmp	.+180    	; 0x1086 <BCM_RxDispatch+0x1aa>
			break;

		case RECEIVING_DATA:
			/*check if receiving data failed*/
			if(UART_InterruptStatus == NOT_OK)
     fd2:	80 91 fe 00 	lds	r24, 0x00FE
     fd6:	88 23       	and	r24, r24
     fd8:	71 f4       	brne	.+28     	; 0xff6 <BCM_RxDispatch+0x11a>
			{

				/*check the index of the failure*/
				BCM_Rx_Info.FailIndex = BCM_Rx_Info.Index - 1u;
     fda:	80 91 f7 00 	lds	r24, 0x00F7
     fde:	90 91 f8 00 	lds	r25, 0x00F8
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	90 93 fa 00 	sts	0x00FA, r25
     fe8:	80 93 f9 00 	sts	0x00F9, r24
				/*switching to idle Rx  mode*/
				Dispatch_RX_Status = RX_IDLE;
     fec:	10 92 fd 00 	sts	0x00FD, r1
				ReturnVal = BCM_RECEIVE_FAIL;
     ff0:	86 e0       	ldi	r24, 0x06	; 6
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	12 c0       	rjmp	.+36     	; 0x101a <BCM_RxDispatch+0x13e>
			}

			else
			{
				/*calculate the checksum value*/
				CheckSumCalculation += BCM_Rx_Buffer.DataPtr[BCM_Rx_Info.Index - 1u];
     ff6:	20 91 ed 00 	lds	r18, 0x00ED
     ffa:	30 91 ee 00 	lds	r19, 0x00EE
     ffe:	80 91 f7 00 	lds	r24, 0x00F7
    1002:	90 91 f8 00 	lds	r25, 0x00F8
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	f9 01       	movw	r30, r18
    100a:	e8 0f       	add	r30, r24
    100c:	f9 1f       	adc	r31, r25
    100e:	90 81       	ld	r25, Z
    1010:	80 91 02 01 	lds	r24, 0x0102
    1014:	89 0f       	add	r24, r25
    1016:	80 93 02 01 	sts	0x0102, r24
			}

			/*check if the index of Rx info buffer equal to array size*/
			if((BCM_Rx_Info.Index) == ((*BCM_Rx_Buffer.ArraySize)))
    101a:	80 91 f7 00 	lds	r24, 0x00F7
    101e:	90 91 f8 00 	lds	r25, 0x00F8
    1022:	e0 91 eb 00 	lds	r30, 0x00EB
    1026:	f0 91 ec 00 	lds	r31, 0x00EC
    102a:	20 81       	ld	r18, Z
    102c:	31 81       	ldd	r19, Z+1	; 0x01
    102e:	82 17       	cp	r24, r18
    1030:	93 07       	cpc	r25, r19
    1032:	19 f4       	brne	.+6      	; 0x103a <BCM_RxDispatch+0x15e>
			{
				/*switch to case receiving checksum*/
				ReceivingFrameStatus = RECEIVING_CHECKSUM;
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	80 93 ff 00 	sts	0x00FF, r24
			}

			/*switch to RECEIVING_Byte_IN_PROGRESS mode*/
			Dispatch_RX_Status = RECEIVING_Byte_IN_PROGRESS;
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	80 93 fd 00 	sts	0x00FD, r24
    1040:	22 c0       	rjmp	.+68     	; 0x1086 <BCM_RxDispatch+0x1aa>
			break;

		case RECEIVING_CHECKSUM:

			/*check if receiving Checksum failed*/
			if(UART_InterruptStatus == NOT_OK)
    1042:	80 91 fe 00 	lds	r24, 0x00FE
    1046:	88 23       	and	r24, r24
    1048:	79 f4       	brne	.+30     	; 0x1068 <BCM_RxDispatch+0x18c>
			{
				/*check the index of the failure*/
				BCM_Rx_Info.FailIndex = *BCM_Rx_Buffer.ArraySize - 1u;
    104a:	e0 91 eb 00 	lds	r30, 0x00EB
    104e:	f0 91 ec 00 	lds	r31, 0x00EC
    1052:	80 81       	ld	r24, Z
    1054:	91 81       	ldd	r25, Z+1	; 0x01
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	90 93 fa 00 	sts	0x00FA, r25
    105c:	80 93 f9 00 	sts	0x00F9, r24

				/*switching to idle Rx idle mode*/
				Dispatch_RX_Status = RX_IDLE;
    1060:	10 92 fd 00 	sts	0x00FD, r1
				ReturnVal = BCM_RECEIVE_FAIL;
    1064:	86 e0       	ldi	r24, 0x06	; 6
    1066:	89 83       	std	Y+1, r24	; 0x01
			{
				/* Do nothing*/
			}

			/*if received checksum equal to calculated checksum*/
			if(BCM_Rx_Info.CheckSum == CheckSumCalculation)
    1068:	90 91 fb 00 	lds	r25, 0x00FB
    106c:	80 91 02 01 	lds	r24, 0x0102
    1070:	98 17       	cp	r25, r24
    1072:	19 f4       	brne	.+6      	; 0x107a <BCM_RxDispatch+0x19e>
			{
				ReturnVal = BCM_RECEIVE_COMPLETE;
    1074:	85 e0       	ldi	r24, 0x05	; 5
    1076:	89 83       	std	Y+1, r24	; 0x01
    1078:	02 c0       	rjmp	.+4      	; 0x107e <BCM_RxDispatch+0x1a2>
			}

			else
			{

				ReturnVal = BCM_RECEIVE_FAIL;
    107a:	86 e0       	ldi	r24, 0x06	; 6
    107c:	89 83       	std	Y+1, r24	; 0x01
			}
			/*switch to RECEIVING_SIZE case*/
			ReceivingFrameStatus = RECEIVING_SIZE;
    107e:	10 92 ff 00 	sts	0x00FF, r1

			/*switch to Rx idle mode*/
			Dispatch_TX_Status = RX_IDLE;
    1082:	10 92 fc 00 	sts	0x00FC, r1

		default:
			/*Do nothing*/
			break;
	}
	return ReturnVal;
    1086:	89 81       	ldd	r24, Y+1	; 0x01
}
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	08 95       	ret

00001098 <BCM_Receive>:
 * Outputs:			NULL
 *
 * Return:			Status to check receiving status
 *******************************************************************************/
EnmBCM_RxDispatchStatus_t BCM_Receive(void)
{
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
	return Dispatch_RX_Status;
    10a0:	80 91 fd 00 	lds	r24, 0x00FD
}
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <BCM_DeInit>:
 * Outputs:			NULL
 *
 * Return:			Status to check function execution
 *******************************************************************************/
EnmBCMstatus_t BCM_DeInit(void)
{
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <BCM_DeInit+0x6>
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
	EnmBCMstatus_t ReturnVal;
	/*stop UART communication protocol*/
	Status_t UART_DeInit_check = UART_StopComm();
    10b4:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <UART_StopComm>
    10b8:	89 83       	std	Y+1, r24	; 0x01
	if(UART_DeInit_check == OK)
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	11 f4       	brne	.+4      	; 0x10c4 <BCM_DeInit+0x1a>
	{
		ReturnVal = BCM_OK;
    10c0:	1a 82       	std	Y+2, r1	; 0x02
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <BCM_DeInit+0x1e>
	}
	else
	{
		ReturnVal = BCM_NOT_OK;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	8a 83       	std	Y+2, r24	; 0x02
	}
	/*reInitaization of all buffers*/
	BCM_Tx_Buffer.DataPtr = NULL_PTR;
    10c8:	10 92 ea 00 	sts	0x00EA, r1
    10cc:	10 92 e9 00 	sts	0x00E9, r1
	BCM_Rx_Buffer.DataPtr = NULL_PTR;
    10d0:	10 92 ee 00 	sts	0x00EE, r1
    10d4:	10 92 ed 00 	sts	0x00ED, r1
	BCM_Tx_Info.CheckSum = 0u;
    10d8:	10 92 f5 00 	sts	0x00F5, r1
	BCM_Tx_Buffer.ArraySize = 0u;
    10dc:	10 92 e8 00 	sts	0x00E8, r1
    10e0:	10 92 e7 00 	sts	0x00E7, r1
	BCM_Tx_Info.Index = 0u;
    10e4:	10 92 f2 00 	sts	0x00F2, r1
    10e8:	10 92 f1 00 	sts	0x00F1, r1
	BCM_Tx_Info.FailIndex = (sint16)(-1);
    10ec:	8f ef       	ldi	r24, 0xFF	; 255
    10ee:	9f ef       	ldi	r25, 0xFF	; 255
    10f0:	90 93 f4 00 	sts	0x00F4, r25
    10f4:	80 93 f3 00 	sts	0x00F3, r24
	BCM_Rx_Info.CheckSum = 0u;
    10f8:	10 92 fb 00 	sts	0x00FB, r1
	BCM_Rx_Buffer.ArraySize = 0u;
    10fc:	10 92 ec 00 	sts	0x00EC, r1
    1100:	10 92 eb 00 	sts	0x00EB, r1
	BCM_Rx_Info.Index = 0u;
    1104:	10 92 f8 00 	sts	0x00F8, r1
    1108:	10 92 f7 00 	sts	0x00F7, r1
	BCM_Rx_Info.FailIndex = (sint16)(-1);
    110c:	8f ef       	ldi	r24, 0xFF	; 255
    110e:	9f ef       	ldi	r25, 0xFF	; 255
    1110:	90 93 fa 00 	sts	0x00FA, r25
    1114:	80 93 f9 00 	sts	0x00F9, r24
	Dispatch_TX_Status = TX_IDLE;
    1118:	10 92 fc 00 	sts	0x00FC, r1
	Dispatch_RX_Status = RX_IDLE;
    111c:	10 92 fd 00 	sts	0x00FD, r1
	return ReturnVal;
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <UART_TxCallbackFunction>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void UART_TxCallbackFunction(void)
{
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
	if(Dispatch_TX_Status == SENDING_Byte_IN_PROGRESS)
    1134:	80 91 fc 00 	lds	r24, 0x00FC
    1138:	82 30       	cpi	r24, 0x02	; 2
    113a:	19 f4       	brne	.+6      	; 0x1142 <UART_TxCallbackFunction+0x16>
	{
		Dispatch_TX_Status = SENDING_FRAME_IN_PROGRESS;
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	80 93 fc 00 	sts	0x00FC, r24
	}
}
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <UART_RxCallbackFunction>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void UART_RxCallbackFunction(void)
{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	00 d0       	rcall	.+0      	; 0x114e <UART_RxCallbackFunction+0x6>
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
	if(Dispatch_RX_Status==RECEIVING_Byte_IN_PROGRESS)
    1152:	80 91 fd 00 	lds	r24, 0x00FD
    1156:	82 30       	cpi	r24, 0x02	; 2
    1158:	e1 f5       	brne	.+120    	; 0x11d2 <UART_RxCallbackFunction+0x8a>
	{
		/*receiving data*/
		switch(ReceivingFrameStatus)
    115a:	80 91 ff 00 	lds	r24, 0x00FF
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	3a 83       	std	Y+2, r19	; 0x02
    1164:	29 83       	std	Y+1, r18	; 0x01
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	9a 81       	ldd	r25, Y+2	; 0x02
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	91 05       	cpc	r25, r1
    116e:	81 f0       	breq	.+32     	; 0x1190 <UART_RxCallbackFunction+0x48>
    1170:	29 81       	ldd	r18, Y+1	; 0x01
    1172:	3a 81       	ldd	r19, Y+2	; 0x02
    1174:	22 30       	cpi	r18, 0x02	; 2
    1176:	31 05       	cpc	r19, r1
    1178:	d1 f0       	breq	.+52     	; 0x11ae <UART_RxCallbackFunction+0x66>
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	9a 81       	ldd	r25, Y+2	; 0x02
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	e1 f4       	brne	.+56     	; 0x11ba <UART_RxCallbackFunction+0x72>
		{
		case RECEIVING_SIZE:
			/*receive first byte of the size*/
			UART_InterruptStatus=UART_ReceiveChar(&ReceiveSizeBuffer);
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	91 e0       	ldi	r25, 0x01	; 1
    1186:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <UART_ReceiveChar>
    118a:	80 93 fe 00 	sts	0x00FE, r24
    118e:	15 c0       	rjmp	.+42     	; 0x11ba <UART_RxCallbackFunction+0x72>
			break;
		case RECEIVING_DATA:
			UART_InterruptStatus = UART_ReceiveChar((BCM_Rx_Buffer.DataPtr+BCM_Rx_Info.Index));
    1190:	20 91 ed 00 	lds	r18, 0x00ED
    1194:	30 91 ee 00 	lds	r19, 0x00EE
    1198:	80 91 f7 00 	lds	r24, 0x00F7
    119c:	90 91 f8 00 	lds	r25, 0x00F8
    11a0:	82 0f       	add	r24, r18
    11a2:	93 1f       	adc	r25, r19
    11a4:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <UART_ReceiveChar>
    11a8:	80 93 fe 00 	sts	0x00FE, r24
    11ac:	06 c0       	rjmp	.+12     	; 0x11ba <UART_RxCallbackFunction+0x72>
			break;
		case RECEIVING_CHECKSUM:
			/*receiving checksum value*/
			UART_InterruptStatus = UART_ReceiveChar(&(BCM_Rx_Info.CheckSum));
    11ae:	8b ef       	ldi	r24, 0xFB	; 251
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <UART_ReceiveChar>
    11b6:	80 93 fe 00 	sts	0x00FE, r24
		default:
			/*DO nothing*/
			break;
		}
		/*return to RECEIVING_FRAME_IN_PROGRESS State*/
		Dispatch_RX_Status = RECEIVING_FRAME_IN_PROGRESS;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	80 93 fd 00 	sts	0x00FD, r24
		BCM_Rx_Info.Index++;
    11c0:	80 91 f7 00 	lds	r24, 0x00F7
    11c4:	90 91 f8 00 	lds	r25, 0x00F8
    11c8:	01 96       	adiw	r24, 0x01	; 1
    11ca:	90 93 f8 00 	sts	0x00F8, r25
    11ce:	80 93 f7 00 	sts	0x00F7, r24
	}
}
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <CPU_Sleep>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void CPU_Sleep(void)
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
	/*select idle mode*/
	CLEAR_BIT(CPU_MCUCR,CPU_SM0);
    11e4:	a5 e5       	ldi	r26, 0x55	; 85
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e5 e5       	ldi	r30, 0x55	; 85
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	8f 7e       	andi	r24, 0xEF	; 239
    11f0:	8c 93       	st	X, r24
	CLEAR_BIT(CPU_MCUCR,CPU_SM1);
    11f2:	a5 e5       	ldi	r26, 0x55	; 85
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e5 e5       	ldi	r30, 0x55	; 85
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	8f 7d       	andi	r24, 0xDF	; 223
    11fe:	8c 93       	st	X, r24
	CLEAR_BIT(CPU_MCUCR,CPU_SM2);
    1200:	a5 e5       	ldi	r26, 0x55	; 85
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e5 e5       	ldi	r30, 0x55	; 85
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	8f 7b       	andi	r24, 0xBF	; 191
    120c:	8c 93       	st	X, r24
}
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <CPU_SleepEnable>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void CPU_SleepEnable(void)
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
	/*set sleep enable bit*/
	SET_BIT(CPU_MCUCR,CPU_SE);
    121c:	a5 e5       	ldi	r26, 0x55	; 85
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e5 e5       	ldi	r30, 0x55	; 85
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	80 68       	ori	r24, 0x80	; 128
    1228:	8c 93       	st	X, r24
}
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <CPU_SleepDisable>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void CPU_SleepDisable(void)
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
	/*clear sleep enable bit*/
	CLEAR_BIT(CPU_MCUCR,CPU_SE);
    1238:	a5 e5       	ldi	r26, 0x55	; 85
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e5 e5       	ldi	r30, 0x55	; 85
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	8f 77       	andi	r24, 0x7F	; 127
    1244:	8c 93       	st	X, r24
}
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <DIO_WritePin>:

#include "DIO_Map.h"
#include"Macro.h"
#include "std_types.h"
void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	00 d0       	rcall	.+0      	; 0x1252 <DIO_WritePin+0x6>
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	89 83       	std	Y+1, r24	; 0x01
    1258:	6a 83       	std	Y+2, r22	; 0x02
	if(PinValue==HIGH)
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	09 f0       	breq	.+2      	; 0x1262 <DIO_WritePin+0x16>
    1260:	6d c0       	rjmp	.+218    	; 0x133c <DIO_WritePin+0xf0>
	{
		if((PinNum>=DIO_PIN0)&&(PinNum<=DIO_PIN7))
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	88 30       	cpi	r24, 0x08	; 8
    1266:	a0 f4       	brcc	.+40     	; 0x1290 <DIO_WritePin+0x44>
		{
			SET_BIT(DIO_PORTA,PinNum);
    1268:	ab e3       	ldi	r26, 0x3B	; 59
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	eb e3       	ldi	r30, 0x3B	; 59
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 2e       	mov	r0, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <DIO_WritePin+0x3a>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	0a 94       	dec	r0
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <DIO_WritePin+0x36>
    128a:	84 2b       	or	r24, r20
    128c:	8c 93       	st	X, r24
    128e:	c8 c0       	rjmp	.+400    	; 0x1420 <DIO_WritePin+0x1d4>
		}
		else if((PinNum>=DIO_PIN8)&&(PinNum<=DIO_PIN15))
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	88 30       	cpi	r24, 0x08	; 8
    1294:	c8 f0       	brcs	.+50     	; 0x12c8 <DIO_WritePin+0x7c>
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	80 31       	cpi	r24, 0x10	; 16
    129a:	b0 f4       	brcc	.+44     	; 0x12c8 <DIO_WritePin+0x7c>
		{
			SET_BIT(DIO_PORTB,(PinNum-DIO_PIN8));
    129c:	a8 e3       	ldi	r26, 0x38	; 56
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e8 e3       	ldi	r30, 0x38	; 56
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	88 2f       	mov	r24, r24
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	08 97       	sbiw	r24, 0x08	; 8
    12b0:	9c 01       	movw	r18, r24
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <DIO_WritePin+0x72>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <DIO_WritePin+0x6e>
    12c2:	84 2b       	or	r24, r20
    12c4:	8c 93       	st	X, r24
    12c6:	ac c0       	rjmp	.+344    	; 0x1420 <DIO_WritePin+0x1d4>
		}
		else if((PinNum>=DIO_PIN16)&&(PinNum<=DIO_PIN23))
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	80 31       	cpi	r24, 0x10	; 16
    12cc:	c8 f0       	brcs	.+50     	; 0x1300 <DIO_WritePin+0xb4>
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	88 31       	cpi	r24, 0x18	; 24
    12d2:	b0 f4       	brcc	.+44     	; 0x1300 <DIO_WritePin+0xb4>
		{
			SET_BIT(DIO_PORTC,(PinNum-DIO_PIN16));
    12d4:	a5 e3       	ldi	r26, 0x35	; 53
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e5 e3       	ldi	r30, 0x35	; 53
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	88 2f       	mov	r24, r24
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	40 97       	sbiw	r24, 0x10	; 16
    12e8:	9c 01       	movw	r18, r24
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	02 2e       	mov	r0, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <DIO_WritePin+0xaa>
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	0a 94       	dec	r0
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <DIO_WritePin+0xa6>
    12fa:	84 2b       	or	r24, r20
    12fc:	8c 93       	st	X, r24
    12fe:	90 c0       	rjmp	.+288    	; 0x1420 <DIO_WritePin+0x1d4>
		}
		else if((PinNum>=DIO_PIN24)&&(PinNum<=DIO_PIN31))
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	88 31       	cpi	r24, 0x18	; 24
    1304:	08 f4       	brcc	.+2      	; 0x1308 <DIO_WritePin+0xbc>
    1306:	8c c0       	rjmp	.+280    	; 0x1420 <DIO_WritePin+0x1d4>
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	80 32       	cpi	r24, 0x20	; 32
    130c:	08 f0       	brcs	.+2      	; 0x1310 <DIO_WritePin+0xc4>
    130e:	88 c0       	rjmp	.+272    	; 0x1420 <DIO_WritePin+0x1d4>
		{
			SET_BIT(DIO_PORTD,(PinNum-DIO_PIN24));
    1310:	a2 e3       	ldi	r26, 0x32	; 50
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e2 e3       	ldi	r30, 0x32	; 50
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	88 2f       	mov	r24, r24
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	48 97       	sbiw	r24, 0x18	; 24
    1324:	9c 01       	movw	r18, r24
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	02 2e       	mov	r0, r18
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <DIO_WritePin+0xe6>
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	0a 94       	dec	r0
    1334:	e2 f7       	brpl	.-8      	; 0x132e <DIO_WritePin+0xe2>
    1336:	84 2b       	or	r24, r20
    1338:	8c 93       	st	X, r24
    133a:	72 c0       	rjmp	.+228    	; 0x1420 <DIO_WritePin+0x1d4>
		}
	}
	else if(PinValue==DIO_PIN0)
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	88 23       	and	r24, r24
    1340:	09 f0       	breq	.+2      	; 0x1344 <DIO_WritePin+0xf8>
    1342:	6e c0       	rjmp	.+220    	; 0x1420 <DIO_WritePin+0x1d4>
	{

		if((PinNum>=DIO_PIN0)&&(PinNum<=DIO_PIN7))
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	88 30       	cpi	r24, 0x08	; 8
    1348:	a8 f4       	brcc	.+42     	; 0x1374 <DIO_WritePin+0x128>
		{
			CLEAR_BIT(DIO_PORTA,PinNum);
    134a:	ab e3       	ldi	r26, 0x3B	; 59
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	eb e3       	ldi	r30, 0x3B	; 59
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_WritePin+0x11c>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_WritePin+0x118>
    136c:	80 95       	com	r24
    136e:	84 23       	and	r24, r20
    1370:	8c 93       	st	X, r24
    1372:	56 c0       	rjmp	.+172    	; 0x1420 <DIO_WritePin+0x1d4>
		}
		else if((PinNum>=DIO_PIN8)&&(PinNum<=DIO_PIN15))
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	88 30       	cpi	r24, 0x08	; 8
    1378:	d0 f0       	brcs	.+52     	; 0x13ae <DIO_WritePin+0x162>
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	80 31       	cpi	r24, 0x10	; 16
    137e:	b8 f4       	brcc	.+46     	; 0x13ae <DIO_WritePin+0x162>
		{
			CLEAR_BIT(DIO_PORTB,(PinNum-DIO_PIN8));
    1380:	a8 e3       	ldi	r26, 0x38	; 56
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e8 e3       	ldi	r30, 0x38	; 56
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	88 2f       	mov	r24, r24
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	08 97       	sbiw	r24, 0x08	; 8
    1394:	9c 01       	movw	r18, r24
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 2e       	mov	r0, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <DIO_WritePin+0x156>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	0a 94       	dec	r0
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <DIO_WritePin+0x152>
    13a6:	80 95       	com	r24
    13a8:	84 23       	and	r24, r20
    13aa:	8c 93       	st	X, r24
    13ac:	39 c0       	rjmp	.+114    	; 0x1420 <DIO_WritePin+0x1d4>
		}
		else if((PinNum>=DIO_PIN16)&&(PinNum<=DIO_PIN23))
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	80 31       	cpi	r24, 0x10	; 16
    13b2:	d0 f0       	brcs	.+52     	; 0x13e8 <DIO_WritePin+0x19c>
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	88 31       	cpi	r24, 0x18	; 24
    13b8:	b8 f4       	brcc	.+46     	; 0x13e8 <DIO_WritePin+0x19c>
		{
			CLEAR_BIT(DIO_PORTC,(PinNum-DIO_PIN16));
    13ba:	a5 e3       	ldi	r26, 0x35	; 53
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e5 e3       	ldi	r30, 0x35	; 53
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	88 2f       	mov	r24, r24
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	40 97       	sbiw	r24, 0x10	; 16
    13ce:	9c 01       	movw	r18, r24
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	02 2e       	mov	r0, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <DIO_WritePin+0x190>
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	0a 94       	dec	r0
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <DIO_WritePin+0x18c>
    13e0:	80 95       	com	r24
    13e2:	84 23       	and	r24, r20
    13e4:	8c 93       	st	X, r24
    13e6:	1c c0       	rjmp	.+56     	; 0x1420 <DIO_WritePin+0x1d4>
		}
		else if((PinNum>=DIO_PIN24)&&(PinNum<=DIO_PIN31))
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	88 31       	cpi	r24, 0x18	; 24
    13ec:	c8 f0       	brcs	.+50     	; 0x1420 <DIO_WritePin+0x1d4>
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	80 32       	cpi	r24, 0x20	; 32
    13f2:	b0 f4       	brcc	.+44     	; 0x1420 <DIO_WritePin+0x1d4>
		{
			CLEAR_BIT(DIO_PORTD,(PinNum-DIO_PIN24));
    13f4:	a2 e3       	ldi	r26, 0x32	; 50
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e2 e3       	ldi	r30, 0x32	; 50
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	48 2f       	mov	r20, r24
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	88 2f       	mov	r24, r24
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	48 97       	sbiw	r24, 0x18	; 24
    1408:	9c 01       	movw	r18, r24
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	02 2e       	mov	r0, r18
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <DIO_WritePin+0x1ca>
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	0a 94       	dec	r0
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <DIO_WritePin+0x1c6>
    141a:	80 95       	com	r24
    141c:	84 23       	and	r24, r20
    141e:	8c 93       	st	X, r24

		}
	}

}
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <DIO_ReadPin>:
uint8 DIO_ReadPin(uint8 PinNum)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	00 d0       	rcall	.+0      	; 0x1430 <DIO_ReadPin+0x6>
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	89 83       	std	Y+1, r24	; 0x01
	if((PinNum>=DIO_PIN0)&&(PinNum<=DIO_PIN7))
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	88 30       	cpi	r24, 0x08	; 8
    143a:	98 f4       	brcc	.+38     	; 0x1462 <DIO_ReadPin+0x38>
	{
		return GET_BIT(DIO_PINA,PinNum);
    143c:	e9 e3       	ldi	r30, 0x39	; 57
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	88 2f       	mov	r24, r24
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	a9 01       	movw	r20, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <DIO_ReadPin+0x2a>
    1450:	55 95       	asr	r21
    1452:	47 95       	ror	r20
    1454:	8a 95       	dec	r24
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <DIO_ReadPin+0x26>
    1458:	ca 01       	movw	r24, r20
    145a:	58 2f       	mov	r21, r24
    145c:	51 70       	andi	r21, 0x01	; 1
    145e:	5a 83       	std	Y+2, r21	; 0x02
    1460:	50 c0       	rjmp	.+160    	; 0x1502 <DIO_ReadPin+0xd8>
	}
	else if((PinNum>=DIO_PIN8)&&(PinNum<=DIO_PIN15))
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	88 30       	cpi	r24, 0x08	; 8
    1466:	b8 f0       	brcs	.+46     	; 0x1496 <DIO_ReadPin+0x6c>
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	80 31       	cpi	r24, 0x10	; 16
    146c:	a0 f4       	brcc	.+40     	; 0x1496 <DIO_ReadPin+0x6c>
	{
		return GET_BIT(DIO_PINB,(PinNum-DIO_PIN8));
    146e:	e6 e3       	ldi	r30, 0x36	; 54
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	88 2f       	mov	r24, r24
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	08 97       	sbiw	r24, 0x08	; 8
    1480:	a9 01       	movw	r20, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <DIO_ReadPin+0x5e>
    1484:	55 95       	asr	r21
    1486:	47 95       	ror	r20
    1488:	8a 95       	dec	r24
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <DIO_ReadPin+0x5a>
    148c:	ca 01       	movw	r24, r20
    148e:	58 2f       	mov	r21, r24
    1490:	51 70       	andi	r21, 0x01	; 1
    1492:	5a 83       	std	Y+2, r21	; 0x02
    1494:	36 c0       	rjmp	.+108    	; 0x1502 <DIO_ReadPin+0xd8>
	}
	else if((PinNum>=DIO_PIN16)&&(PinNum<=DIO_PIN23))
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	80 31       	cpi	r24, 0x10	; 16
    149a:	b8 f0       	brcs	.+46     	; 0x14ca <DIO_ReadPin+0xa0>
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	88 31       	cpi	r24, 0x18	; 24
    14a0:	a0 f4       	brcc	.+40     	; 0x14ca <DIO_ReadPin+0xa0>
	{
		return GET_BIT(DIO_PINC,(PinNum-DIO_PIN16));
    14a2:	e3 e3       	ldi	r30, 0x33	; 51
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	88 2f       	mov	r24, r24
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	40 97       	sbiw	r24, 0x10	; 16
    14b4:	a9 01       	movw	r20, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <DIO_ReadPin+0x92>
    14b8:	55 95       	asr	r21
    14ba:	47 95       	ror	r20
    14bc:	8a 95       	dec	r24
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <DIO_ReadPin+0x8e>
    14c0:	ca 01       	movw	r24, r20
    14c2:	58 2f       	mov	r21, r24
    14c4:	51 70       	andi	r21, 0x01	; 1
    14c6:	5a 83       	std	Y+2, r21	; 0x02
    14c8:	1c c0       	rjmp	.+56     	; 0x1502 <DIO_ReadPin+0xd8>
	}
	else if((PinNum>=DIO_PIN24)&&(PinNum<=DIO_PIN31))
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	88 31       	cpi	r24, 0x18	; 24
    14ce:	b8 f0       	brcs	.+46     	; 0x14fe <DIO_ReadPin+0xd4>
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	80 32       	cpi	r24, 0x20	; 32
    14d4:	a0 f4       	brcc	.+40     	; 0x14fe <DIO_ReadPin+0xd4>
	{
		return GET_BIT(DIO_PIND,(PinNum-DIO_PIN24));
    14d6:	e0 e3       	ldi	r30, 0x30	; 48
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	88 2f       	mov	r24, r24
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	48 97       	sbiw	r24, 0x18	; 24
    14e8:	a9 01       	movw	r20, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <DIO_ReadPin+0xc6>
    14ec:	55 95       	asr	r21
    14ee:	47 95       	ror	r20
    14f0:	8a 95       	dec	r24
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <DIO_ReadPin+0xc2>
    14f4:	ca 01       	movw	r24, r20
    14f6:	58 2f       	mov	r21, r24
    14f8:	51 70       	andi	r21, 0x01	; 1
    14fa:	5a 83       	std	Y+2, r21	; 0x02
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <DIO_ReadPin+0xd8>
	}
	return DIO_PIN8;
    14fe:	88 e0       	ldi	r24, 0x08	; 8
    1500:	8a 83       	std	Y+2, r24	; 0x02
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <DIO_SetPinDirection>:
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	00 d0       	rcall	.+0      	; 0x1514 <DIO_SetPinDirection+0x6>
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	89 83       	std	Y+1, r24	; 0x01
    151a:	6a 83       	std	Y+2, r22	; 0x02
	if(PinDirection==INPUT)
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	88 23       	and	r24, r24
    1520:	09 f0       	breq	.+2      	; 0x1524 <DIO_SetPinDirection+0x16>
    1522:	71 c0       	rjmp	.+226    	; 0x1606 <DIO_SetPinDirection+0xf8>
	{
		if((PinNum>=DIO_PIN0)&&(PinNum<=DIO_PIN7))
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	88 30       	cpi	r24, 0x08	; 8
    1528:	a8 f4       	brcc	.+42     	; 0x1554 <DIO_SetPinDirection+0x46>
		{
			CLEAR_BIT(DIO_DDRA,PinNum);
    152a:	aa e3       	ldi	r26, 0x3A	; 58
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	ea e3       	ldi	r30, 0x3A	; 58
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_SetPinDirection+0x3a>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_SetPinDirection+0x36>
    154c:	80 95       	com	r24
    154e:	84 23       	and	r24, r20
    1550:	8c 93       	st	X, r24
    1552:	c7 c0       	rjmp	.+398    	; 0x16e2 <DIO_SetPinDirection+0x1d4>
		}
		else if((PinNum>=DIO_PIN8)&&(PinNum<=DIO_PIN15))
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	88 30       	cpi	r24, 0x08	; 8
    1558:	d0 f0       	brcs	.+52     	; 0x158e <DIO_SetPinDirection+0x80>
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	80 31       	cpi	r24, 0x10	; 16
    155e:	b8 f4       	brcc	.+46     	; 0x158e <DIO_SetPinDirection+0x80>
		{
			CLEAR_BIT(DIO_DDRB,(PinNum-DIO_PIN8));
    1560:	a7 e3       	ldi	r26, 0x37	; 55
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e7 e3       	ldi	r30, 0x37	; 55
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	48 2f       	mov	r20, r24
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	88 2f       	mov	r24, r24
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	08 97       	sbiw	r24, 0x08	; 8
    1574:	9c 01       	movw	r18, r24
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	02 2e       	mov	r0, r18
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <DIO_SetPinDirection+0x74>
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	0a 94       	dec	r0
    1584:	e2 f7       	brpl	.-8      	; 0x157e <DIO_SetPinDirection+0x70>
    1586:	80 95       	com	r24
    1588:	84 23       	and	r24, r20
    158a:	8c 93       	st	X, r24
    158c:	aa c0       	rjmp	.+340    	; 0x16e2 <DIO_SetPinDirection+0x1d4>
		}
		else if((PinNum>=DIO_PIN16)&&(PinNum<=DIO_PIN23))
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	80 31       	cpi	r24, 0x10	; 16
    1592:	d0 f0       	brcs	.+52     	; 0x15c8 <DIO_SetPinDirection+0xba>
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	88 31       	cpi	r24, 0x18	; 24
    1598:	b8 f4       	brcc	.+46     	; 0x15c8 <DIO_SetPinDirection+0xba>
		{
			CLEAR_BIT(DIO_DDRC,(PinNum-DIO_PIN16));
    159a:	a4 e3       	ldi	r26, 0x34	; 52
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e4 e3       	ldi	r30, 0x34	; 52
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	48 2f       	mov	r20, r24
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	88 2f       	mov	r24, r24
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	40 97       	sbiw	r24, 0x10	; 16
    15ae:	9c 01       	movw	r18, r24
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	02 2e       	mov	r0, r18
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <DIO_SetPinDirection+0xae>
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	0a 94       	dec	r0
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <DIO_SetPinDirection+0xaa>
    15c0:	80 95       	com	r24
    15c2:	84 23       	and	r24, r20
    15c4:	8c 93       	st	X, r24
    15c6:	8d c0       	rjmp	.+282    	; 0x16e2 <DIO_SetPinDirection+0x1d4>
		}
		else if((PinNum>=DIO_PIN24)&&(PinNum<=DIO_PIN31))
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	88 31       	cpi	r24, 0x18	; 24
    15cc:	08 f4       	brcc	.+2      	; 0x15d0 <DIO_SetPinDirection+0xc2>
    15ce:	89 c0       	rjmp	.+274    	; 0x16e2 <DIO_SetPinDirection+0x1d4>
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	80 32       	cpi	r24, 0x20	; 32
    15d4:	08 f0       	brcs	.+2      	; 0x15d8 <DIO_SetPinDirection+0xca>
    15d6:	85 c0       	rjmp	.+266    	; 0x16e2 <DIO_SetPinDirection+0x1d4>
		{
			CLEAR_BIT(DIO_DDRD,(PinNum-DIO_PIN24));
    15d8:	a1 e3       	ldi	r26, 0x31	; 49
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e1 e3       	ldi	r30, 0x31	; 49
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	48 2f       	mov	r20, r24
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	88 2f       	mov	r24, r24
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	48 97       	sbiw	r24, 0x18	; 24
    15ec:	9c 01       	movw	r18, r24
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	02 2e       	mov	r0, r18
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <DIO_SetPinDirection+0xec>
    15f6:	88 0f       	add	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	0a 94       	dec	r0
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <DIO_SetPinDirection+0xe8>
    15fe:	80 95       	com	r24
    1600:	84 23       	and	r24, r20
    1602:	8c 93       	st	X, r24
    1604:	6e c0       	rjmp	.+220    	; 0x16e2 <DIO_SetPinDirection+0x1d4>
		}
	}
	else if(PinDirection==OUTPUT)
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	09 f0       	breq	.+2      	; 0x160e <DIO_SetPinDirection+0x100>
    160c:	6a c0       	rjmp	.+212    	; 0x16e2 <DIO_SetPinDirection+0x1d4>
	{
		if((PinNum>=DIO_PIN0)&&(PinNum<=DIO_PIN7))
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	88 30       	cpi	r24, 0x08	; 8
    1612:	a0 f4       	brcc	.+40     	; 0x163c <DIO_SetPinDirection+0x12e>
		{
			SET_BIT(DIO_DDRA,PinNum);
    1614:	aa e3       	ldi	r26, 0x3A	; 58
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	ea e3       	ldi	r30, 0x3A	; 58
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	48 2f       	mov	r20, r24
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	02 2e       	mov	r0, r18
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <DIO_SetPinDirection+0x124>
    162e:	88 0f       	add	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	0a 94       	dec	r0
    1634:	e2 f7       	brpl	.-8      	; 0x162e <DIO_SetPinDirection+0x120>
    1636:	84 2b       	or	r24, r20
    1638:	8c 93       	st	X, r24
    163a:	53 c0       	rjmp	.+166    	; 0x16e2 <DIO_SetPinDirection+0x1d4>
		}
		else if((PinNum>=DIO_PIN8)&&(PinNum<=DIO_PIN15))
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	88 30       	cpi	r24, 0x08	; 8
    1640:	c8 f0       	brcs	.+50     	; 0x1674 <DIO_SetPinDirection+0x166>
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	80 31       	cpi	r24, 0x10	; 16
    1646:	b0 f4       	brcc	.+44     	; 0x1674 <DIO_SetPinDirection+0x166>
		{
			SET_BIT(DIO_DDRB,(PinNum-DIO_PIN8));
    1648:	a7 e3       	ldi	r26, 0x37	; 55
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e7 e3       	ldi	r30, 0x37	; 55
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	48 2f       	mov	r20, r24
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	88 2f       	mov	r24, r24
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	08 97       	sbiw	r24, 0x08	; 8
    165c:	9c 01       	movw	r18, r24
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <DIO_SetPinDirection+0x15c>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <DIO_SetPinDirection+0x158>
    166e:	84 2b       	or	r24, r20
    1670:	8c 93       	st	X, r24
    1672:	37 c0       	rjmp	.+110    	; 0x16e2 <DIO_SetPinDirection+0x1d4>
		}
		else if((PinNum>=DIO_PIN16)&&(PinNum<=DIO_PIN23))
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	80 31       	cpi	r24, 0x10	; 16
    1678:	c8 f0       	brcs	.+50     	; 0x16ac <DIO_SetPinDirection+0x19e>
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	88 31       	cpi	r24, 0x18	; 24
    167e:	b0 f4       	brcc	.+44     	; 0x16ac <DIO_SetPinDirection+0x19e>
		{
			SET_BIT(DIO_DDRC,(PinNum-DIO_PIN16));
    1680:	a4 e3       	ldi	r26, 0x34	; 52
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e4 e3       	ldi	r30, 0x34	; 52
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	88 2f       	mov	r24, r24
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	40 97       	sbiw	r24, 0x10	; 16
    1694:	9c 01       	movw	r18, r24
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	02 2e       	mov	r0, r18
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <DIO_SetPinDirection+0x194>
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	0a 94       	dec	r0
    16a4:	e2 f7       	brpl	.-8      	; 0x169e <DIO_SetPinDirection+0x190>
    16a6:	84 2b       	or	r24, r20
    16a8:	8c 93       	st	X, r24
    16aa:	1b c0       	rjmp	.+54     	; 0x16e2 <DIO_SetPinDirection+0x1d4>
		}
		else if((PinNum>=DIO_PIN24)&&(PinNum<=DIO_PIN31))
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	88 31       	cpi	r24, 0x18	; 24
    16b0:	c0 f0       	brcs	.+48     	; 0x16e2 <DIO_SetPinDirection+0x1d4>
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	80 32       	cpi	r24, 0x20	; 32
    16b6:	a8 f4       	brcc	.+42     	; 0x16e2 <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DIO_DDRD,(PinNum-DIO_PIN24));
    16b8:	a1 e3       	ldi	r26, 0x31	; 49
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e1 e3       	ldi	r30, 0x31	; 49
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	48 2f       	mov	r20, r24
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	88 2f       	mov	r24, r24
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	48 97       	sbiw	r24, 0x18	; 24
    16cc:	9c 01       	movw	r18, r24
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 2e       	mov	r0, r18
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <DIO_SetPinDirection+0x1cc>
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	0a 94       	dec	r0
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <DIO_SetPinDirection+0x1c8>
    16de:	84 2b       	or	r24, r20
    16e0:	8c 93       	st	X, r24
		}
	}


}
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	cf 91       	pop	r28
    16e8:	df 91       	pop	r29
    16ea:	08 95       	ret

000016ec <__vector_14>:
#include "avr/interrupt.h"
#include "std_types.h"
/********************************************************************************************/

ISR(USART_UDRE_vect)
{
    16ec:	1f 92       	push	r1
    16ee:	0f 92       	push	r0
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	0f 92       	push	r0
    16f4:	11 24       	eor	r1, r1
    16f6:	2f 93       	push	r18
    16f8:	3f 93       	push	r19
    16fa:	4f 93       	push	r20
    16fc:	5f 93       	push	r21
    16fe:	6f 93       	push	r22
    1700:	7f 93       	push	r23
    1702:	8f 93       	push	r24
    1704:	9f 93       	push	r25
    1706:	af 93       	push	r26
    1708:	bf 93       	push	r27
    170a:	ef 93       	push	r30
    170c:	ff 93       	push	r31
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
	UART_Config.UART_Tx_CallBack_Function();
    1716:	e0 91 e1 00 	lds	r30, 0x00E1
    171a:	f0 91 e2 00 	lds	r31, 0x00E2
    171e:	09 95       	icall
}
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	ff 91       	pop	r31
    1726:	ef 91       	pop	r30
    1728:	bf 91       	pop	r27
    172a:	af 91       	pop	r26
    172c:	9f 91       	pop	r25
    172e:	8f 91       	pop	r24
    1730:	7f 91       	pop	r23
    1732:	6f 91       	pop	r22
    1734:	5f 91       	pop	r21
    1736:	4f 91       	pop	r20
    1738:	3f 91       	pop	r19
    173a:	2f 91       	pop	r18
    173c:	0f 90       	pop	r0
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	0f 90       	pop	r0
    1742:	1f 90       	pop	r1
    1744:	18 95       	reti

00001746 <__vector_13>:

ISR(USART_RXC_vect)
{
    1746:	1f 92       	push	r1
    1748:	0f 92       	push	r0
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	0f 92       	push	r0
    174e:	11 24       	eor	r1, r1
    1750:	2f 93       	push	r18
    1752:	3f 93       	push	r19
    1754:	4f 93       	push	r20
    1756:	5f 93       	push	r21
    1758:	6f 93       	push	r22
    175a:	7f 93       	push	r23
    175c:	8f 93       	push	r24
    175e:	9f 93       	push	r25
    1760:	af 93       	push	r26
    1762:	bf 93       	push	r27
    1764:	ef 93       	push	r30
    1766:	ff 93       	push	r31
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
	UART_Config.UART_Rx_CallBack_Function();
    1770:	e0 91 e3 00 	lds	r30, 0x00E3
    1774:	f0 91 e4 00 	lds	r31, 0x00E4
    1778:	09 95       	icall
}
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	ff 91       	pop	r31
    1780:	ef 91       	pop	r30
    1782:	bf 91       	pop	r27
    1784:	af 91       	pop	r26
    1786:	9f 91       	pop	r25
    1788:	8f 91       	pop	r24
    178a:	7f 91       	pop	r23
    178c:	6f 91       	pop	r22
    178e:	5f 91       	pop	r21
    1790:	4f 91       	pop	r20
    1792:	3f 91       	pop	r19
    1794:	2f 91       	pop	r18
    1796:	0f 90       	pop	r0
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	0f 90       	pop	r0
    179c:	1f 90       	pop	r1
    179e:	18 95       	reti

000017a0 <UART_Init>:
 *  rate,Baud rate mood,Data size,Number of stop bits,Parity Mood and_		*
 *  interrupts mood.															*
 *																			*
 *****************************************************************************/
Status_t UART_Init(void)
{
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	00 d0       	rcall	.+0      	; 0x17a6 <UART_Init+0x6>
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <UART_Init+0x8>
    17a8:	0f 92       	push	r0
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
	Status_t ReturnValue=NOT_OK;
    17ae:	19 82       	std	Y+1, r1	; 0x01
	/*select Baud rate mood*/
	if((UART_Config.Init_DoubleSpeed)==Dou_Speed)
    17b0:	80 91 e0 00 	lds	r24, 0x00E0
    17b4:	81 30       	cpi	r24, 0x01	; 1
    17b6:	09 f5       	brne	.+66     	; 0x17fa <UART_Init+0x5a>
	{
		SET_BIT(USART_UCSRA,Bit_U2X);
    17b8:	ab e2       	ldi	r26, 0x2B	; 43
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	eb e2       	ldi	r30, 0x2B	; 43
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	82 60       	ori	r24, 0x02	; 2
    17c4:	8c 93       	st	X, r24
		USART_BaudRateLow=UART_Config.BuadRate;
    17c6:	e9 e2       	ldi	r30, 0x29	; 41
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 91 d8 00 	lds	r24, 0x00D8
    17ce:	90 91 d9 00 	lds	r25, 0x00D9
    17d2:	80 83       	st	Z, r24
		CLEAR_BIT(USART_BaudRateHigh,SelectRegister_URSEL);
    17d4:	a0 e4       	ldi	r26, 0x40	; 64
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e0 e4       	ldi	r30, 0x40	; 64
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	8f 77       	andi	r24, 0x7F	; 127
    17e0:	8c 93       	st	X, r24
		USART_BaudRateHigh=((UART_Config.BuadRate)>>8);
    17e2:	e0 e4       	ldi	r30, 0x40	; 64
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 91 d8 00 	lds	r24, 0x00D8
    17ea:	90 91 d9 00 	lds	r25, 0x00D9
    17ee:	89 2f       	mov	r24, r25
    17f0:	99 27       	eor	r25, r25
    17f2:	80 83       	st	Z, r24
		ReturnValue=OK;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	16 c0       	rjmp	.+44     	; 0x1826 <UART_Init+0x86>
	}
	else if((UART_Config.Init_DoubleSpeed)==NormalSpeed)
    17fa:	80 91 e0 00 	lds	r24, 0x00E0
    17fe:	88 23       	and	r24, r24
    1800:	89 f4       	brne	.+34     	; 0x1824 <UART_Init+0x84>
	{
		CLEAR_BIT(USART_UCSRA,Bit_U2X);
    1802:	ab e2       	ldi	r26, 0x2B	; 43
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	eb e2       	ldi	r30, 0x2B	; 43
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	8d 7f       	andi	r24, 0xFD	; 253
    180e:	8c 93       	st	X, r24
		USART_BaudRateLow=UART_Config.BuadRate;
    1810:	e9 e2       	ldi	r30, 0x29	; 41
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 91 d8 00 	lds	r24, 0x00D8
    1818:	90 91 d9 00 	lds	r25, 0x00D9
    181c:	80 83       	st	Z, r24
		ReturnValue=OK;
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	89 83       	std	Y+1, r24	; 0x01
    1822:	01 c0       	rjmp	.+2      	; 0x1826 <UART_Init+0x86>
	}
	else
		ReturnValue=NOT_OK;
    1824:	19 82       	std	Y+1, r1	; 0x01
	/*select parity mood*/
	switch(UART_Config.Init_Parity)
    1826:	80 91 da 00 	lds	r24, 0x00DA
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	3d 83       	std	Y+5, r19	; 0x05
    1830:	2c 83       	std	Y+4, r18	; 0x04
    1832:	8c 81       	ldd	r24, Y+4	; 0x04
    1834:	9d 81       	ldd	r25, Y+5	; 0x05
    1836:	81 30       	cpi	r24, 0x01	; 1
    1838:	91 05       	cpc	r25, r1
    183a:	d9 f0       	breq	.+54     	; 0x1872 <UART_Init+0xd2>
    183c:	2c 81       	ldd	r18, Y+4	; 0x04
    183e:	3d 81       	ldd	r19, Y+5	; 0x05
    1840:	22 30       	cpi	r18, 0x02	; 2
    1842:	31 05       	cpc	r19, r1
    1844:	69 f0       	breq	.+26     	; 0x1860 <UART_Init+0xc0>
    1846:	8c 81       	ldd	r24, Y+4	; 0x04
    1848:	9d 81       	ldd	r25, Y+5	; 0x05
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	d1 f4       	brne	.+52     	; 0x1882 <UART_Init+0xe2>
	{
	case NoParity:
		USART_UCSRC=(USART_UCSRC|0x80)&(~(1<<Bit0_UPM0))&(~(1<<Bit1_UPM1));
    184e:	a0 e4       	ldi	r26, 0x40	; 64
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e0 e4       	ldi	r30, 0x40	; 64
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	8f 74       	andi	r24, 0x4F	; 79
    185a:	80 68       	ori	r24, 0x80	; 128
    185c:	8c 93       	st	X, r24
    185e:	12 c0       	rjmp	.+36     	; 0x1884 <UART_Init+0xe4>
		if(ReturnValue==OK)
			ReturnValue=OK;
		break;
	case EvenParity:
		USART_UCSRC=(USART_UCSRC|0xA0)&(~(1<<Bit0_UPM0));
    1860:	a0 e4       	ldi	r26, 0x40	; 64
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e0 e4       	ldi	r30, 0x40	; 64
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	8f 74       	andi	r24, 0x4F	; 79
    186c:	80 6a       	ori	r24, 0xA0	; 160
    186e:	8c 93       	st	X, r24
    1870:	09 c0       	rjmp	.+18     	; 0x1884 <UART_Init+0xe4>
		if(ReturnValue==OK)
			ReturnValue=OK;
		break;
	case OddParity:
		USART_UCSRC=(USART_UCSRC|0xB0);
    1872:	a0 e4       	ldi	r26, 0x40	; 64
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e0 e4       	ldi	r30, 0x40	; 64
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	80 6b       	ori	r24, 0xB0	; 176
    187e:	8c 93       	st	X, r24
    1880:	01 c0       	rjmp	.+2      	; 0x1884 <UART_Init+0xe4>
		if(ReturnValue==OK)
			ReturnValue=OK;
		break;
	default:
		ReturnValue=NOT_OK;
    1882:	19 82       	std	Y+1, r1	; 0x01
	}
	/*select number of stop bits*/
	if(UART_Config.Init_Stop==OneStopBit)
    1884:	80 91 db 00 	lds	r24, 0x00DB
    1888:	88 23       	and	r24, r24
    188a:	49 f4       	brne	.+18     	; 0x189e <UART_Init+0xfe>
	{
		USART_UCSRC=(USART_UCSRC|0x80)&(~(1<<StopBits_USBS));
    188c:	a0 e4       	ldi	r26, 0x40	; 64
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	e0 e4       	ldi	r30, 0x40	; 64
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	87 77       	andi	r24, 0x77	; 119
    1898:	80 68       	ori	r24, 0x80	; 128
    189a:	8c 93       	st	X, r24
    189c:	0d c0       	rjmp	.+26     	; 0x18b8 <UART_Init+0x118>
		if(ReturnValue==OK)
			ReturnValue=OK;
	}
	else if(UART_Config.Init_Stop==TwoStopBit)
    189e:	80 91 db 00 	lds	r24, 0x00DB
    18a2:	81 30       	cpi	r24, 0x01	; 1
    18a4:	41 f4       	brne	.+16     	; 0x18b6 <UART_Init+0x116>
	{
		USART_UCSRC=(USART_UCSRC|0x88);
    18a6:	a0 e4       	ldi	r26, 0x40	; 64
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e0 e4       	ldi	r30, 0x40	; 64
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	88 68       	ori	r24, 0x88	; 136
    18b2:	8c 93       	st	X, r24
    18b4:	01 c0       	rjmp	.+2      	; 0x18b8 <UART_Init+0x118>
		if(ReturnValue==OK)
			ReturnValue=OK;
	}
	else
		ReturnValue=NOT_OK;
    18b6:	19 82       	std	Y+1, r1	; 0x01
	/*select data size*/
	switch(UART_Config.Init_DataSize)
    18b8:	80 91 dc 00 	lds	r24, 0x00DC
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	3b 83       	std	Y+3, r19	; 0x03
    18c2:	2a 83       	std	Y+2, r18	; 0x02
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	9b 81       	ldd	r25, Y+3	; 0x03
    18c8:	82 30       	cpi	r24, 0x02	; 2
    18ca:	91 05       	cpc	r25, r1
    18cc:	d9 f1       	breq	.+118    	; 0x1944 <UART_Init+0x1a4>
    18ce:	2a 81       	ldd	r18, Y+2	; 0x02
    18d0:	3b 81       	ldd	r19, Y+3	; 0x03
    18d2:	23 30       	cpi	r18, 0x03	; 3
    18d4:	31 05       	cpc	r19, r1
    18d6:	54 f4       	brge	.+20     	; 0x18ec <UART_Init+0x14c>
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	9b 81       	ldd	r25, Y+3	; 0x03
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	91 f0       	breq	.+36     	; 0x1904 <UART_Init+0x164>
    18e0:	2a 81       	ldd	r18, Y+2	; 0x02
    18e2:	3b 81       	ldd	r19, Y+3	; 0x03
    18e4:	21 30       	cpi	r18, 0x01	; 1
    18e6:	31 05       	cpc	r19, r1
    18e8:	e9 f0       	breq	.+58     	; 0x1924 <UART_Init+0x184>
    18ea:	5a c0       	rjmp	.+180    	; 0x19a0 <UART_Init+0x200>
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	9b 81       	ldd	r25, Y+3	; 0x03
    18f0:	83 30       	cpi	r24, 0x03	; 3
    18f2:	91 05       	cpc	r25, r1
    18f4:	b9 f1       	breq	.+110    	; 0x1964 <UART_Init+0x1c4>
    18f6:	2a 81       	ldd	r18, Y+2	; 0x02
    18f8:	3b 81       	ldd	r19, Y+3	; 0x03
    18fa:	24 30       	cpi	r18, 0x04	; 4
    18fc:	31 05       	cpc	r19, r1
    18fe:	09 f4       	brne	.+2      	; 0x1902 <UART_Init+0x162>
    1900:	40 c0       	rjmp	.+128    	; 0x1982 <UART_Init+0x1e2>
    1902:	4e c0       	rjmp	.+156    	; 0x19a0 <UART_Init+0x200>
	{
	case _5_bit:
		USART_UCSRC=(USART_UCSRC|0x80)&(~(1<<Bit0_UCSZ0))&(~(1<<Bit1_UCSZ1));
    1904:	a0 e4       	ldi	r26, 0x40	; 64
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e0 e4       	ldi	r30, 0x40	; 64
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	89 77       	andi	r24, 0x79	; 121
    1910:	80 68       	ori	r24, 0x80	; 128
    1912:	8c 93       	st	X, r24
		CLEAR_BIT(USART_UCSRB,Bit2_UCSZ2);
    1914:	aa e2       	ldi	r26, 0x2A	; 42
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	ea e2       	ldi	r30, 0x2A	; 42
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	8b 7f       	andi	r24, 0xFB	; 251
    1920:	8c 93       	st	X, r24
    1922:	3f c0       	rjmp	.+126    	; 0x19a2 <UART_Init+0x202>
		if(ReturnValue==OK)
			ReturnValue=OK;
		break;
	case _6_bit:
		USART_UCSRC=(USART_UCSRC|0x82)&(~(1<<Bit1_UCSZ1));
    1924:	a0 e4       	ldi	r26, 0x40	; 64
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e0 e4       	ldi	r30, 0x40	; 64
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	89 77       	andi	r24, 0x79	; 121
    1930:	82 68       	ori	r24, 0x82	; 130
    1932:	8c 93       	st	X, r24
		CLEAR_BIT(USART_UCSRB,Bit2_UCSZ2);
    1934:	aa e2       	ldi	r26, 0x2A	; 42
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	ea e2       	ldi	r30, 0x2A	; 42
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	8b 7f       	andi	r24, 0xFB	; 251
    1940:	8c 93       	st	X, r24
    1942:	2f c0       	rjmp	.+94     	; 0x19a2 <UART_Init+0x202>
		if(ReturnValue==OK)
			ReturnValue=OK;
		break;
	case _7_bit:
		USART_UCSRC=(USART_UCSRC|0x84)&(~(1<<Bit0_UCSZ0));
    1944:	a0 e4       	ldi	r26, 0x40	; 64
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e0 e4       	ldi	r30, 0x40	; 64
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	89 77       	andi	r24, 0x79	; 121
    1950:	84 68       	ori	r24, 0x84	; 132
    1952:	8c 93       	st	X, r24
		CLEAR_BIT(USART_UCSRB,Bit2_UCSZ2);
    1954:	aa e2       	ldi	r26, 0x2A	; 42
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	ea e2       	ldi	r30, 0x2A	; 42
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	8b 7f       	andi	r24, 0xFB	; 251
    1960:	8c 93       	st	X, r24
    1962:	1f c0       	rjmp	.+62     	; 0x19a2 <UART_Init+0x202>
		if(ReturnValue==OK)
			ReturnValue=OK;
		break;
	case _8_bit:
		USART_UCSRC=(USART_UCSRC|0x86);
    1964:	a0 e4       	ldi	r26, 0x40	; 64
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e0 e4       	ldi	r30, 0x40	; 64
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	86 68       	ori	r24, 0x86	; 134
    1970:	8c 93       	st	X, r24
		CLEAR_BIT(USART_UCSRB,Bit2_UCSZ2);
    1972:	aa e2       	ldi	r26, 0x2A	; 42
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	ea e2       	ldi	r30, 0x2A	; 42
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	8b 7f       	andi	r24, 0xFB	; 251
    197e:	8c 93       	st	X, r24
    1980:	10 c0       	rjmp	.+32     	; 0x19a2 <UART_Init+0x202>
		if(ReturnValue==OK)
			ReturnValue=OK;
		break;
	case _9_bit:
		USART_UCSRC=(USART_UCSRC|0x86);
    1982:	a0 e4       	ldi	r26, 0x40	; 64
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e0 e4       	ldi	r30, 0x40	; 64
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	86 68       	ori	r24, 0x86	; 134
    198e:	8c 93       	st	X, r24
		SET_BIT(USART_UCSRB,Bit2_UCSZ2);
    1990:	aa e2       	ldi	r26, 0x2A	; 42
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	ea e2       	ldi	r30, 0x2A	; 42
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	84 60       	ori	r24, 0x04	; 4
    199c:	8c 93       	st	X, r24
    199e:	01 c0       	rjmp	.+2      	; 0x19a2 <UART_Init+0x202>
		if(ReturnValue==OK)
			ReturnValue=OK;
		break;
	default:
		ReturnValue=NOT_OK;
    19a0:	19 82       	std	Y+1, r1	; 0x01
	}
	/*enable or disable empty data register interrupt*/
	if(UART_Config.Init_Em)
    19a2:	80 91 dd 00 	lds	r24, 0x00DD
    19a6:	88 23       	and	r24, r24
    19a8:	41 f0       	breq	.+16     	; 0x19ba <UART_Init+0x21a>
	{
		CLEAR_BIT(USART_UCSRB,InterruptEnable_UDRIE);
    19aa:	aa e2       	ldi	r26, 0x2A	; 42
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	ea e2       	ldi	r30, 0x2A	; 42
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	8f 7d       	andi	r24, 0xDF	; 223
    19b6:	8c 93       	st	X, r24
    19b8:	0d c0       	rjmp	.+26     	; 0x19d4 <UART_Init+0x234>
		if(ReturnValue==OK)
			ReturnValue=OK;
	}
	else if((UART_Config.Init_Em)==EnableEM)
    19ba:	80 91 dd 00 	lds	r24, 0x00DD
    19be:	88 23       	and	r24, r24
    19c0:	41 f4       	brne	.+16     	; 0x19d2 <UART_Init+0x232>
	{
		SET_BIT(USART_UCSRB,InterruptEnable_UDRIE);
    19c2:	aa e2       	ldi	r26, 0x2A	; 42
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	ea e2       	ldi	r30, 0x2A	; 42
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	80 62       	ori	r24, 0x20	; 32
    19ce:	8c 93       	st	X, r24
    19d0:	01 c0       	rjmp	.+2      	; 0x19d4 <UART_Init+0x234>
		if(ReturnValue==OK)
			ReturnValue=OK;
	}
	else
		ReturnValue=NOT_OK;
    19d2:	19 82       	std	Y+1, r1	; 0x01
	/*enable or disable transmitter interrupt*/
	if(UART_Config.Init_TX)
    19d4:	80 91 de 00 	lds	r24, 0x00DE
    19d8:	88 23       	and	r24, r24
    19da:	41 f0       	breq	.+16     	; 0x19ec <UART_Init+0x24c>
	{
		CLEAR_BIT(USART_UCSRB,InterruptEnable_TXCIE);
    19dc:	aa e2       	ldi	r26, 0x2A	; 42
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	ea e2       	ldi	r30, 0x2A	; 42
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	8f 7b       	andi	r24, 0xBF	; 191
    19e8:	8c 93       	st	X, r24
    19ea:	0d c0       	rjmp	.+26     	; 0x1a06 <UART_Init+0x266>
		if(ReturnValue==OK)
			ReturnValue=OK;
	}
	else if((UART_Config.Init_TX)==EnableTX)
    19ec:	80 91 de 00 	lds	r24, 0x00DE
    19f0:	88 23       	and	r24, r24
    19f2:	41 f4       	brne	.+16     	; 0x1a04 <UART_Init+0x264>
	{
		SET_BIT(USART_UCSRB,InterruptEnable_TXCIE);
    19f4:	aa e2       	ldi	r26, 0x2A	; 42
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	ea e2       	ldi	r30, 0x2A	; 42
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	80 64       	ori	r24, 0x40	; 64
    1a00:	8c 93       	st	X, r24
    1a02:	01 c0       	rjmp	.+2      	; 0x1a06 <UART_Init+0x266>
		if(ReturnValue==OK)
			ReturnValue=OK;
	}
	else
		ReturnValue=NOT_OK;
    1a04:	19 82       	std	Y+1, r1	; 0x01
	/*enable or disable receiver interrupt*/
	if(UART_Config.Init_RX)
    1a06:	80 91 df 00 	lds	r24, 0x00DF
    1a0a:	88 23       	and	r24, r24
    1a0c:	41 f0       	breq	.+16     	; 0x1a1e <UART_Init+0x27e>
	{
		CLEAR_BIT(USART_UCSRB,InterruptEnable_RXCIE);
    1a0e:	aa e2       	ldi	r26, 0x2A	; 42
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	ea e2       	ldi	r30, 0x2A	; 42
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	8f 77       	andi	r24, 0x7F	; 127
    1a1a:	8c 93       	st	X, r24
    1a1c:	0d c0       	rjmp	.+26     	; 0x1a38 <UART_Init+0x298>
		if(ReturnValue==OK)
			ReturnValue=OK;
	}
	else if((UART_Config.Init_RX)==EnableRX)
    1a1e:	80 91 df 00 	lds	r24, 0x00DF
    1a22:	88 23       	and	r24, r24
    1a24:	41 f4       	brne	.+16     	; 0x1a36 <UART_Init+0x296>
	{
		SET_BIT(USART_UCSRB,InterruptEnable_RXCIE);
    1a26:	aa e2       	ldi	r26, 0x2A	; 42
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	ea e2       	ldi	r30, 0x2A	; 42
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	80 68       	ori	r24, 0x80	; 128
    1a32:	8c 93       	st	X, r24
    1a34:	01 c0       	rjmp	.+2      	; 0x1a38 <UART_Init+0x298>
		if(ReturnValue==OK)
			ReturnValue=OK;
	}
	else
		ReturnValue=NOT_OK;
    1a36:	19 82       	std	Y+1, r1	; 0x01

	return ReturnValue;
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <UART_ReceiveChar>:
 *	                                                       				    *
 *4-this function's role is return data that is received by UART				*
 *																			*
 *****************************************************************************/
Status_t UART_ReceiveChar(uint8* a_data_ptr)
{
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <UART_ReceiveChar+0x6>
    1a50:	00 d0       	rcall	.+0      	; 0x1a52 <UART_ReceiveChar+0x8>
    1a52:	0f 92       	push	r0
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	9d 83       	std	Y+5, r25	; 0x05
    1a5a:	8c 83       	std	Y+4, r24	; 0x04
	uint16 dummy;
	Status_t ReturnValue;
	/*check if pulling is selected*/
	if(!(GET_BIT(USART_UCSRB,InterruptEnable_RXCIE)))
    1a5c:	ea e2       	ldi	r30, 0x2A	; 42
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	88 23       	and	r24, r24
    1a64:	2c f0       	brlt	.+10     	; 0x1a70 <UART_ReceiveChar+0x26>
		/*pull on receive flag*/
		while(!(GET_BIT(USART_UCSRA,Flag_RXC)));
    1a66:	eb e2       	ldi	r30, 0x2B	; 43
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	88 23       	and	r24, r24
    1a6e:	dc f7       	brge	.-10     	; 0x1a66 <UART_ReceiveChar+0x1c>
	/*get Data from data register of UART*/
	if(USART_UCSRA&((1<<Flag_PE)|(1<<Flag_DOR)|(1<<Flag_FE)))
    1a70:	eb e2       	ldi	r30, 0x2B	; 43
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	88 2f       	mov	r24, r24
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	8c 71       	andi	r24, 0x1C	; 28
    1a7c:	90 70       	andi	r25, 0x00	; 0
    1a7e:	00 97       	sbiw	r24, 0x00	; 0
    1a80:	49 f0       	breq	.+18     	; 0x1a94 <UART_ReceiveChar+0x4a>
	{
		dummy=USART_DataRegister;
    1a82:	ec e2       	ldi	r30, 0x2C	; 44
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	88 2f       	mov	r24, r24
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	9b 83       	std	Y+3, r25	; 0x03
    1a8e:	8a 83       	std	Y+2, r24	; 0x02
		ReturnValue=NOT_OK;
    1a90:	19 82       	std	Y+1, r1	; 0x01
    1a92:	08 c0       	rjmp	.+16     	; 0x1aa4 <UART_ReceiveChar+0x5a>
	}
	else
	{
		*a_data_ptr=USART_DataRegister;
    1a94:	ec e2       	ldi	r30, 0x2C	; 44
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	ec 81       	ldd	r30, Y+4	; 0x04
    1a9c:	fd 81       	ldd	r31, Y+5	; 0x05
    1a9e:	80 83       	st	Z, r24
		ReturnValue=OK;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	89 83       	std	Y+1, r24	; 0x01
	}
	return ReturnValue;
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <UART_SendChar>:
 *	                                                       				    *
 *4-this function's role is send data from user by UART						*
 *																			*
 *****************************************************************************/
Status_t UART_SendChar(uint8 a_data)
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <UART_SendChar+0x6>
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	8a 83       	std	Y+2, r24	; 0x02
	Status_t ReturnValue;
	/*check if pulling is selected*/
	if(!(GET_BIT(USART_UCSRB,InterruptEnable_UDRIE)))
    1ac2:	ea e2       	ldi	r30, 0x2A	; 42
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	82 95       	swap	r24
    1aca:	86 95       	lsr	r24
    1acc:	87 70       	andi	r24, 0x07	; 7
    1ace:	88 2f       	mov	r24, r24
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	81 70       	andi	r24, 0x01	; 1
    1ad4:	90 70       	andi	r25, 0x00	; 0
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	61 f4       	brne	.+24     	; 0x1af2 <UART_SendChar+0x3c>
		/*pull on empty Data register flag*/
		while(!(GET_BIT(USART_UCSRA,Flag_UDRE)));
    1ada:	eb e2       	ldi	r30, 0x2B	; 43
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	82 95       	swap	r24
    1ae2:	86 95       	lsr	r24
    1ae4:	87 70       	andi	r24, 0x07	; 7
    1ae6:	88 2f       	mov	r24, r24
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	81 70       	andi	r24, 0x01	; 1
    1aec:	90 70       	andi	r25, 0x00	; 0
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	a1 f3       	breq	.-24     	; 0x1ada <UART_SendChar+0x24>
	/*put Data on data register of UART*/
	if(GET_BIT(USART_UCSRB,Enable_TXEN))
    1af2:	ea e2       	ldi	r30, 0x2A	; 42
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	86 95       	lsr	r24
    1afa:	86 95       	lsr	r24
    1afc:	86 95       	lsr	r24
    1afe:	88 2f       	mov	r24, r24
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	81 70       	andi	r24, 0x01	; 1
    1b04:	90 70       	andi	r25, 0x00	; 0
    1b06:	88 23       	and	r24, r24
    1b08:	39 f0       	breq	.+14     	; 0x1b18 <UART_SendChar+0x62>
	{
		USART_DataRegister=a_data;
    1b0a:	ec e2       	ldi	r30, 0x2C	; 44
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	80 83       	st	Z, r24
		ReturnValue=OK;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	89 83       	std	Y+1, r24	; 0x01
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <UART_SendChar+0x64>
	}
	else
		ReturnValue=NOT_OK;
    1b18:	19 82       	std	Y+1, r1	; 0x01
	return ReturnValue;
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	08 95       	ret

00001b26 <UART_Receive>:
 *	                                                       				    *
 *4-this function's role is return string that is received by UART			*
 *																			*
 *****************************************************************************/
Status_t UART_Receive( uint8* const a_data_ptr)
{
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <UART_Receive+0x6>
    1b2c:	00 d0       	rcall	.+0      	; 0x1b2e <UART_Receive+0x8>
    1b2e:	0f 92       	push	r0
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	9c 83       	std	Y+4, r25	; 0x04
    1b36:	8b 83       	std	Y+3, r24	; 0x03
	Status_t ReturnValue;
	/*Loop to Receive string by UART*/
	for(uint8 Count=0;a_data_ptr[Count-1]!='\0';Count++)
    1b38:	19 82       	std	Y+1, r1	; 0x01
    1b3a:	13 c0       	rjmp	.+38     	; 0x1b62 <UART_Receive+0x3c>
	{
		ReturnValue=UART_ReceiveChar(&(a_data_ptr[Count]));
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	9c 81       	ldd	r25, Y+4	; 0x04
    1b46:	82 0f       	add	r24, r18
    1b48:	93 1f       	adc	r25, r19
    1b4a:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <UART_ReceiveChar>
    1b4e:	8a 83       	std	Y+2, r24	; 0x02
		if(!(ReturnValue))
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	88 23       	and	r24, r24
    1b54:	19 f4       	brne	.+6      	; 0x1b5c <UART_Receive+0x36>
			return ReturnValue;
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	8d 83       	std	Y+5, r24	; 0x05
    1b5a:	13 c0       	rjmp	.+38     	; 0x1b82 <UART_Receive+0x5c>
 *****************************************************************************/
Status_t UART_Receive( uint8* const a_data_ptr)
{
	Status_t ReturnValue;
	/*Loop to Receive string by UART*/
	for(uint8 Count=0;a_data_ptr[Count-1]!='\0';Count++)
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	8f 5f       	subi	r24, 0xFF	; 255
    1b60:	89 83       	std	Y+1, r24	; 0x01
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	88 2f       	mov	r24, r24
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	9c 01       	movw	r18, r24
    1b6a:	21 50       	subi	r18, 0x01	; 1
    1b6c:	30 40       	sbci	r19, 0x00	; 0
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	9c 81       	ldd	r25, Y+4	; 0x04
    1b72:	fc 01       	movw	r30, r24
    1b74:	e2 0f       	add	r30, r18
    1b76:	f3 1f       	adc	r31, r19
    1b78:	80 81       	ld	r24, Z
    1b7a:	88 23       	and	r24, r24
    1b7c:	f9 f6       	brne	.-66     	; 0x1b3c <UART_Receive+0x16>
	{
		ReturnValue=UART_ReceiveChar(&(a_data_ptr[Count]));
		if(!(ReturnValue))
			return ReturnValue;
	}
	return ReturnValue;
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	8d 83       	std	Y+5, r24	; 0x05
    1b82:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	08 95       	ret

00001b94 <UART_Send>:
 *	                                                       				    *
 *4-this function's role is send string from user by UART					*
 *																			*
 *****************************************************************************/
Status_t UART_Send(uint8* a_data_ptr)
{
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	00 d0       	rcall	.+0      	; 0x1b9a <UART_Send+0x6>
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <UART_Send+0x8>
    1b9c:	0f 92       	push	r0
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	9c 83       	std	Y+4, r25	; 0x04
    1ba4:	8b 83       	std	Y+3, r24	; 0x03
	Status_t ReturnValue;
	/*Loop on string to send by UART*/
	for(uint8 Count=0;a_data_ptr[Count]!='\0';Count++)
    1ba6:	19 82       	std	Y+1, r1	; 0x01
    1ba8:	15 c0       	rjmp	.+42     	; 0x1bd4 <UART_Send+0x40>
	{
		ReturnValue=UART_SendChar((a_data_ptr[Count]));
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	e2 0f       	add	r30, r18
    1bb8:	f3 1f       	adc	r31, r19
    1bba:	80 81       	ld	r24, Z
    1bbc:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <UART_SendChar>
    1bc0:	8a 83       	std	Y+2, r24	; 0x02
		if(!(ReturnValue))
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	88 23       	and	r24, r24
    1bc6:	19 f4       	brne	.+6      	; 0x1bce <UART_Send+0x3a>
			return ReturnValue;
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	8d 83       	std	Y+5, r24	; 0x05
    1bcc:	10 c0       	rjmp	.+32     	; 0x1bee <UART_Send+0x5a>
 *****************************************************************************/
Status_t UART_Send(uint8* a_data_ptr)
{
	Status_t ReturnValue;
	/*Loop on string to send by UART*/
	for(uint8 Count=0;a_data_ptr[Count]!='\0';Count++)
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	8f 5f       	subi	r24, 0xFF	; 255
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bde:	fc 01       	movw	r30, r24
    1be0:	e2 0f       	add	r30, r18
    1be2:	f3 1f       	adc	r31, r19
    1be4:	80 81       	ld	r24, Z
    1be6:	88 23       	and	r24, r24
    1be8:	01 f7       	brne	.-64     	; 0x1baa <UART_Send+0x16>
	{
		ReturnValue=UART_SendChar((a_data_ptr[Count]));
		if(!(ReturnValue))
			return ReturnValue;
	}
	return ReturnValue;
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	8d 83       	std	Y+5, r24	; 0x05
    1bee:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <UART_StartComm>:
 *4-this function's role is starting UART communication_		*
 *  by Set Enable Bits for receive and transmit.				*
 *																*
 * **************************************************************/
Status_t UART_StartComm(void)
{
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	0f 92       	push	r0
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
	Status_t ReturnValue;
	SET_BIT(USART_UCSRB,Enable_TXEN);
    1c0a:	aa e2       	ldi	r26, 0x2A	; 42
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	ea e2       	ldi	r30, 0x2A	; 42
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	88 60       	ori	r24, 0x08	; 8
    1c16:	8c 93       	st	X, r24
	SET_BIT(USART_UCSRB,Enable_RXEN);
    1c18:	aa e2       	ldi	r26, 0x2A	; 42
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	ea e2       	ldi	r30, 0x2A	; 42
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	80 61       	ori	r24, 0x10	; 16
    1c24:	8c 93       	st	X, r24
	if((GET_BIT(USART_UCSRB,Enable_TXEN)))
    1c26:	ea e2       	ldi	r30, 0x2A	; 42
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	86 95       	lsr	r24
    1c2e:	86 95       	lsr	r24
    1c30:	86 95       	lsr	r24
    1c32:	88 2f       	mov	r24, r24
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	81 70       	andi	r24, 0x01	; 1
    1c38:	90 70       	andi	r25, 0x00	; 0
    1c3a:	88 23       	and	r24, r24
    1c3c:	81 f0       	breq	.+32     	; 0x1c5e <UART_StartComm+0x5e>
	{
		if((GET_BIT(USART_UCSRB,Enable_RXEN)))
    1c3e:	ea e2       	ldi	r30, 0x2A	; 42
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	82 95       	swap	r24
    1c46:	8f 70       	andi	r24, 0x0F	; 15
    1c48:	88 2f       	mov	r24, r24
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	81 70       	andi	r24, 0x01	; 1
    1c4e:	90 70       	andi	r25, 0x00	; 0
    1c50:	88 23       	and	r24, r24
    1c52:	19 f0       	breq	.+6      	; 0x1c5a <UART_StartComm+0x5a>
			ReturnValue=OK;
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	89 83       	std	Y+1, r24	; 0x01
    1c58:	03 c0       	rjmp	.+6      	; 0x1c60 <UART_StartComm+0x60>
		else
			ReturnValue=NOT_OK;
    1c5a:	19 82       	std	Y+1, r1	; 0x01
    1c5c:	01 c0       	rjmp	.+2      	; 0x1c60 <UART_StartComm+0x60>
	}
	else
		ReturnValue=NOT_OK;
    1c5e:	19 82       	std	Y+1, r1	; 0x01
	return ReturnValue;
    1c60:	89 81       	ldd	r24, Y+1	; 0x01

}
    1c62:	0f 90       	pop	r0
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	08 95       	ret

00001c6a <UART_StopComm>:
 *4-this function's role is stopping UART communication_		*
 *  by Clear Enable Bits for receive and transmit.				*
 *																*
 * **************************************************************/
Status_t UART_StopComm(void)
{
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	0f 92       	push	r0
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
	Status_t ReturnValue;
	while((GET_BIT(USART_UCSRA,Flag_UDRE))==0);
    1c74:	eb e2       	ldi	r30, 0x2B	; 43
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	82 95       	swap	r24
    1c7c:	86 95       	lsr	r24
    1c7e:	87 70       	andi	r24, 0x07	; 7
    1c80:	88 2f       	mov	r24, r24
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	81 70       	andi	r24, 0x01	; 1
    1c86:	90 70       	andi	r25, 0x00	; 0
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	a1 f3       	breq	.-24     	; 0x1c74 <UART_StopComm+0xa>
	CLEAR_BIT(USART_UCSRB,Enable_TXEN);
    1c8c:	aa e2       	ldi	r26, 0x2A	; 42
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	ea e2       	ldi	r30, 0x2A	; 42
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	87 7f       	andi	r24, 0xF7	; 247
    1c98:	8c 93       	st	X, r24
	CLEAR_BIT(USART_UCSRB,Enable_RXEN);
    1c9a:	aa e2       	ldi	r26, 0x2A	; 42
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	ea e2       	ldi	r30, 0x2A	; 42
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	8f 7e       	andi	r24, 0xEF	; 239
    1ca6:	8c 93       	st	X, r24
	CLEAR_BIT(USART_UCSRB,InterruptEnable_UDRIE);
    1ca8:	aa e2       	ldi	r26, 0x2A	; 42
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	ea e2       	ldi	r30, 0x2A	; 42
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	8f 7d       	andi	r24, 0xDF	; 223
    1cb4:	8c 93       	st	X, r24
	CLEAR_BIT(USART_UCSRB,InterruptEnable_TXCIE);
    1cb6:	aa e2       	ldi	r26, 0x2A	; 42
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	ea e2       	ldi	r30, 0x2A	; 42
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	8f 7b       	andi	r24, 0xBF	; 191
    1cc2:	8c 93       	st	X, r24
	CLEAR_BIT(USART_UCSRB,InterruptEnable_RXCIE);
    1cc4:	aa e2       	ldi	r26, 0x2A	; 42
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	ea e2       	ldi	r30, 0x2A	; 42
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	8f 77       	andi	r24, 0x7F	; 127
    1cd0:	8c 93       	st	X, r24
	if(!(GET_BIT(USART_UCSRB,Enable_TXEN)))
    1cd2:	ea e2       	ldi	r30, 0x2A	; 42
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	86 95       	lsr	r24
    1cda:	86 95       	lsr	r24
    1cdc:	86 95       	lsr	r24
    1cde:	88 2f       	mov	r24, r24
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	81 70       	andi	r24, 0x01	; 1
    1ce4:	90 70       	andi	r25, 0x00	; 0
    1ce6:	00 97       	sbiw	r24, 0x00	; 0
    1ce8:	81 f4       	brne	.+32     	; 0x1d0a <UART_StopComm+0xa0>
	{
		if(!(GET_BIT(USART_UCSRB,Enable_RXEN)))
    1cea:	ea e2       	ldi	r30, 0x2A	; 42
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	82 95       	swap	r24
    1cf2:	8f 70       	andi	r24, 0x0F	; 15
    1cf4:	88 2f       	mov	r24, r24
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	81 70       	andi	r24, 0x01	; 1
    1cfa:	90 70       	andi	r25, 0x00	; 0
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	19 f4       	brne	.+6      	; 0x1d06 <UART_StopComm+0x9c>
			ReturnValue=OK;
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	89 83       	std	Y+1, r24	; 0x01
    1d04:	03 c0       	rjmp	.+6      	; 0x1d0c <UART_StopComm+0xa2>
		else
			ReturnValue=NOT_OK;
    1d06:	19 82       	std	Y+1, r1	; 0x01
    1d08:	01 c0       	rjmp	.+2      	; 0x1d0c <UART_StopComm+0xa2>
	}
	else
		ReturnValue=NOT_OK;
    1d0a:	19 82       	std	Y+1, r1	; 0x01
	return ReturnValue;
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d0e:	0f 90       	pop	r0
    1d10:	cf 91       	pop	r28
    1d12:	df 91       	pop	r29
    1d14:	08 95       	ret

00001d16 <UART_EmptyRegisterInterrupt>:
 *4-this function's role enable or disable empty register		*
 *interrupt.													*
 *																*
 * **************************************************************/
Status_t UART_EmptyRegisterInterrupt(void)
{
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	0f 92       	push	r0
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62
	Status_t ReturnValue=NOT_OK;
    1d20:	19 82       	std	Y+1, r1	; 0x01
	/*enable or disable empty data register interrupt*/
	if(UART_Config.Init_Em)
    1d22:	80 91 dd 00 	lds	r24, 0x00DD
    1d26:	88 23       	and	r24, r24
    1d28:	41 f0       	breq	.+16     	; 0x1d3a <UART_EmptyRegisterInterrupt+0x24>
	{
		CLEAR_BIT(USART_UCSRB,InterruptEnable_UDRIE);
    1d2a:	aa e2       	ldi	r26, 0x2A	; 42
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	ea e2       	ldi	r30, 0x2A	; 42
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	8f 7d       	andi	r24, 0xDF	; 223
    1d36:	8c 93       	st	X, r24
    1d38:	0d c0       	rjmp	.+26     	; 0x1d54 <UART_EmptyRegisterInterrupt+0x3e>
		if(ReturnValue==OK)
			ReturnValue=OK;
	}
	else if((UART_Config.Init_Em)==EnableEM)
    1d3a:	80 91 dd 00 	lds	r24, 0x00DD
    1d3e:	88 23       	and	r24, r24
    1d40:	41 f4       	brne	.+16     	; 0x1d52 <UART_EmptyRegisterInterrupt+0x3c>
	{
		SET_BIT(USART_UCSRB,InterruptEnable_UDRIE);
    1d42:	aa e2       	ldi	r26, 0x2A	; 42
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	ea e2       	ldi	r30, 0x2A	; 42
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	80 62       	ori	r24, 0x20	; 32
    1d4e:	8c 93       	st	X, r24
    1d50:	01 c0       	rjmp	.+2      	; 0x1d54 <UART_EmptyRegisterInterrupt+0x3e>
		if(ReturnValue==OK)
			ReturnValue=OK;
	}
	else
		ReturnValue=NOT_OK;
    1d52:	19 82       	std	Y+1, r1	; 0x01
	return ReturnValue;
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d56:	0f 90       	pop	r0
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <UART_ReceiveInterrupt>:
 *	                                                            *
 *4-this function's role enable or disable receive interrupt.	*													*
 *																*
 * **************************************************************/
Status_t UART_ReceiveInterrupt(void)
{
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	0f 92       	push	r0
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
	Status_t ReturnValue=NOT_OK;
    1d68:	19 82       	std	Y+1, r1	; 0x01
	/*enable or disable receiver interrupt*/
	if(UART_Config.Init_RX)
    1d6a:	80 91 df 00 	lds	r24, 0x00DF
    1d6e:	88 23       	and	r24, r24
    1d70:	41 f0       	breq	.+16     	; 0x1d82 <UART_ReceiveInterrupt+0x24>
	{
		CLEAR_BIT(USART_UCSRB,InterruptEnable_RXCIE);
    1d72:	aa e2       	ldi	r26, 0x2A	; 42
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	ea e2       	ldi	r30, 0x2A	; 42
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	8f 77       	andi	r24, 0x7F	; 127
    1d7e:	8c 93       	st	X, r24
    1d80:	0d c0       	rjmp	.+26     	; 0x1d9c <UART_ReceiveInterrupt+0x3e>
		if(ReturnValue==OK)
			ReturnValue=OK;
	}
	else if((UART_Config.Init_RX)==EnableRX)
    1d82:	80 91 df 00 	lds	r24, 0x00DF
    1d86:	88 23       	and	r24, r24
    1d88:	41 f4       	brne	.+16     	; 0x1d9a <UART_ReceiveInterrupt+0x3c>
	{
		SET_BIT(USART_UCSRB,InterruptEnable_RXCIE);
    1d8a:	aa e2       	ldi	r26, 0x2A	; 42
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	ea e2       	ldi	r30, 0x2A	; 42
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	80 68       	ori	r24, 0x80	; 128
    1d96:	8c 93       	st	X, r24
    1d98:	01 c0       	rjmp	.+2      	; 0x1d9c <UART_ReceiveInterrupt+0x3e>
		if(ReturnValue==OK)
			ReturnValue=OK;
	}
	else
		ReturnValue=NOT_OK;
    1d9a:	19 82       	std	Y+1, r1	; 0x01
	return ReturnValue;
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d9e:	0f 90       	pop	r0
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	08 95       	ret

00001da6 <UART_transmitInterrupt>:
 *	                                                            *
 *4-this function's role enable or disable transmit interrupt.	*													*
 *																*
 * **************************************************************/
Status_t UART_transmitInterrupt(void)
{
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	0f 92       	push	r0
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
	Status_t ReturnValue=NOT_OK;
    1db0:	19 82       	std	Y+1, r1	; 0x01
	/*enable or disable transmitter interrupt*/
		if(UART_Config.Init_TX)
    1db2:	80 91 de 00 	lds	r24, 0x00DE
    1db6:	88 23       	and	r24, r24
    1db8:	41 f0       	breq	.+16     	; 0x1dca <UART_transmitInterrupt+0x24>
		{
			CLEAR_BIT(USART_UCSRB,InterruptEnable_TXCIE);
    1dba:	aa e2       	ldi	r26, 0x2A	; 42
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	ea e2       	ldi	r30, 0x2A	; 42
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	8f 7b       	andi	r24, 0xBF	; 191
    1dc6:	8c 93       	st	X, r24
    1dc8:	0d c0       	rjmp	.+26     	; 0x1de4 <UART_transmitInterrupt+0x3e>
			if(ReturnValue==OK)
				ReturnValue=OK;
		}
		else if((UART_Config.Init_TX)==EnableTX)
    1dca:	80 91 de 00 	lds	r24, 0x00DE
    1dce:	88 23       	and	r24, r24
    1dd0:	41 f4       	brne	.+16     	; 0x1de2 <UART_transmitInterrupt+0x3c>
		{
			SET_BIT(USART_UCSRB,InterruptEnable_TXCIE);
    1dd2:	aa e2       	ldi	r26, 0x2A	; 42
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	ea e2       	ldi	r30, 0x2A	; 42
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	80 64       	ori	r24, 0x40	; 64
    1dde:	8c 93       	st	X, r24
    1de0:	01 c0       	rjmp	.+2      	; 0x1de4 <UART_transmitInterrupt+0x3e>
			if(ReturnValue==OK)
				ReturnValue=OK;
		}
		else
			ReturnValue=NOT_OK;
    1de2:	19 82       	std	Y+1, r1	; 0x01
	return ReturnValue;
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1de6:	0f 90       	pop	r0
    1de8:	cf 91       	pop	r28
    1dea:	df 91       	pop	r29
    1dec:	08 95       	ret

00001dee <main>:

/*******************************************************************************
 *                             Main Function                                   *
 *******************************************************************************/
int main(void)
{
    1dee:	df 93       	push	r29
    1df0:	cf 93       	push	r28
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	cb 51       	subi	r28, 0x1B	; 27
    1df8:	d1 40       	sbci	r29, 0x01	; 1
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
	EnmBCMstatus_t BCM_Status;

	uint8 SendData_Ptr[] = "Ahmed El-Dakhly & Hesham Hafez want to say thank you Hossam for helping us, and this is for switch case :D 1234";
    1e04:	9e 01       	movw	r18, r28
    1e06:	21 5c       	subi	r18, 0xC1	; 193
    1e08:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0a:	c9 5e       	subi	r28, 0xE9	; 233
    1e0c:	de 4f       	sbci	r29, 0xFE	; 254
    1e0e:	39 83       	std	Y+1, r19	; 0x01
    1e10:	28 83       	st	Y, r18
    1e12:	c7 51       	subi	r28, 0x17	; 23
    1e14:	d1 40       	sbci	r29, 0x01	; 1
    1e16:	80 e6       	ldi	r24, 0x60	; 96
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	c7 5e       	subi	r28, 0xE7	; 231
    1e1c:	de 4f       	sbci	r29, 0xFE	; 254
    1e1e:	99 83       	std	Y+1, r25	; 0x01
    1e20:	88 83       	st	Y, r24
    1e22:	c9 51       	subi	r28, 0x19	; 25
    1e24:	d1 40       	sbci	r29, 0x01	; 1
    1e26:	90 e7       	ldi	r25, 0x70	; 112
    1e28:	c5 5e       	subi	r28, 0xE5	; 229
    1e2a:	de 4f       	sbci	r29, 0xFE	; 254
    1e2c:	98 83       	st	Y, r25
    1e2e:	cb 51       	subi	r28, 0x1B	; 27
    1e30:	d1 40       	sbci	r29, 0x01	; 1
    1e32:	c7 5e       	subi	r28, 0xE7	; 231
    1e34:	de 4f       	sbci	r29, 0xFE	; 254
    1e36:	a8 81       	ld	r26, Y
    1e38:	b9 81       	ldd	r27, Y+1	; 0x01
    1e3a:	c9 51       	subi	r28, 0x19	; 25
    1e3c:	d1 40       	sbci	r29, 0x01	; 1
    1e3e:	0c 90       	ld	r0, X
    1e40:	c7 5e       	subi	r28, 0xE7	; 231
    1e42:	de 4f       	sbci	r29, 0xFE	; 254
    1e44:	e8 81       	ld	r30, Y
    1e46:	f9 81       	ldd	r31, Y+1	; 0x01
    1e48:	c9 51       	subi	r28, 0x19	; 25
    1e4a:	d1 40       	sbci	r29, 0x01	; 1
    1e4c:	31 96       	adiw	r30, 0x01	; 1
    1e4e:	c7 5e       	subi	r28, 0xE7	; 231
    1e50:	de 4f       	sbci	r29, 0xFE	; 254
    1e52:	f9 83       	std	Y+1, r31	; 0x01
    1e54:	e8 83       	st	Y, r30
    1e56:	c9 51       	subi	r28, 0x19	; 25
    1e58:	d1 40       	sbci	r29, 0x01	; 1
    1e5a:	c9 5e       	subi	r28, 0xE9	; 233
    1e5c:	de 4f       	sbci	r29, 0xFE	; 254
    1e5e:	a8 81       	ld	r26, Y
    1e60:	b9 81       	ldd	r27, Y+1	; 0x01
    1e62:	c7 51       	subi	r28, 0x17	; 23
    1e64:	d1 40       	sbci	r29, 0x01	; 1
    1e66:	0c 92       	st	X, r0
    1e68:	c9 5e       	subi	r28, 0xE9	; 233
    1e6a:	de 4f       	sbci	r29, 0xFE	; 254
    1e6c:	e8 81       	ld	r30, Y
    1e6e:	f9 81       	ldd	r31, Y+1	; 0x01
    1e70:	c7 51       	subi	r28, 0x17	; 23
    1e72:	d1 40       	sbci	r29, 0x01	; 1
    1e74:	31 96       	adiw	r30, 0x01	; 1
    1e76:	c9 5e       	subi	r28, 0xE9	; 233
    1e78:	de 4f       	sbci	r29, 0xFE	; 254
    1e7a:	f9 83       	std	Y+1, r31	; 0x01
    1e7c:	e8 83       	st	Y, r30
    1e7e:	c7 51       	subi	r28, 0x17	; 23
    1e80:	d1 40       	sbci	r29, 0x01	; 1
    1e82:	c5 5e       	subi	r28, 0xE5	; 229
    1e84:	de 4f       	sbci	r29, 0xFE	; 254
    1e86:	f8 81       	ld	r31, Y
    1e88:	cb 51       	subi	r28, 0x1B	; 27
    1e8a:	d1 40       	sbci	r29, 0x01	; 1
    1e8c:	f1 50       	subi	r31, 0x01	; 1
    1e8e:	c5 5e       	subi	r28, 0xE5	; 229
    1e90:	de 4f       	sbci	r29, 0xFE	; 254
    1e92:	f8 83       	st	Y, r31
    1e94:	cb 51       	subi	r28, 0x1B	; 27
    1e96:	d1 40       	sbci	r29, 0x01	; 1
    1e98:	c5 5e       	subi	r28, 0xE5	; 229
    1e9a:	de 4f       	sbci	r29, 0xFE	; 254
    1e9c:	28 81       	ld	r18, Y
    1e9e:	cb 51       	subi	r28, 0x1B	; 27
    1ea0:	d1 40       	sbci	r29, 0x01	; 1
    1ea2:	22 23       	and	r18, r18
    1ea4:	31 f6       	brne	.-116    	; 0x1e32 <main+0x44>
	uint16 SendSize = (sizeof(SendData_Ptr));
    1ea6:	80 e7       	ldi	r24, 0x70	; 112
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	9d af       	std	Y+61, r25	; 0x3d
    1eac:	8c af       	std	Y+60, r24	; 0x3c

	uint16 x;
	uint16 * ReceiveSize = &x;
    1eae:	ce 01       	movw	r24, r28
    1eb0:	81 55       	subi	r24, 0x51	; 81
    1eb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb4:	9b af       	std	Y+59, r25	; 0x3b
    1eb6:	8a af       	std	Y+58, r24	; 0x3a
	uint8 ReceiveData_Ptr[MAX_DATA_RECEIVED]={0};
    1eb8:	ce 01       	movw	r24, r28
    1eba:	8f 54       	subi	r24, 0x4F	; 79
    1ebc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ebe:	24 e6       	ldi	r18, 0x64	; 100
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	df 01       	movw	r26, r30
    1ec4:	32 2f       	mov	r19, r18
    1ec6:	1d 92       	st	X+, r1
    1ec8:	3a 95       	dec	r19
    1eca:	e9 f7       	brne	.-6      	; 0x1ec6 <main+0xd8>

	BCM_Init();
    1ecc:	0e 94 a3 05 	call	0xb46	; 0xb46 <BCM_Init>
	BCM_Send(SendData_Ptr, SendSize);
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	cf 96       	adiw	r24, 0x3f	; 63
    1ed4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ed6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ed8:	b9 01       	movw	r22, r18
    1eda:	0e 94 fd 05 	call	0xbfa	; 0xbfa <BCM_Send>
	BCM_SetupReceive(ReceiveData_Ptr , ReceiveSize);
    1ede:	ce 01       	movw	r24, r28
    1ee0:	8f 54       	subi	r24, 0x4F	; 79
    1ee2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee4:	2a ad       	ldd	r18, Y+58	; 0x3a
    1ee6:	3b ad       	ldd	r19, Y+59	; 0x3b
    1ee8:	b9 01       	movw	r22, r18
    1eea:	0e 94 37 07 	call	0xe6e	; 0xe6e <BCM_SetupReceive>

	DIO_SetPinDirection(DIO_PIN12,HIGH);
    1eee:	8c e0       	ldi	r24, 0x0C	; 12
    1ef0:	61 e0       	ldi	r22, 0x01	; 1
    1ef2:	0e 94 87 0a 	call	0x150e	; 0x150e <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PIN13,HIGH);
    1ef6:	8d e0       	ldi	r24, 0x0D	; 13
    1ef8:	61 e0       	ldi	r22, 0x01	; 1
    1efa:	0e 94 87 0a 	call	0x150e	; 0x150e <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PIN14,HIGH);
    1efe:	8e e0       	ldi	r24, 0x0E	; 14
    1f00:	61 e0       	ldi	r22, 0x01	; 1
    1f02:	0e 94 87 0a 	call	0x150e	; 0x150e <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PIN15,HIGH);
    1f06:	8f e0       	ldi	r24, 0x0F	; 15
    1f08:	61 e0       	ldi	r22, 0x01	; 1
    1f0a:	0e 94 87 0a 	call	0x150e	; 0x150e <DIO_SetPinDirection>

	CPU_Sleep();
    1f0e:	0e 94 ee 08 	call	0x11dc	; 0x11dc <CPU_Sleep>
	SET_BIT(SREG,7);
    1f12:	af e5       	ldi	r26, 0x5F	; 95
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	ef e5       	ldi	r30, 0x5F	; 95
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	80 68       	ori	r24, 0x80	; 128
    1f1e:	8c 93       	st	X, r24

	while(1)
	{
		BCM_Status = BCM_TxDispatch();
    1f20:	0e 94 34 06 	call	0xc68	; 0xc68 <BCM_TxDispatch>
    1f24:	8e af       	std	Y+62, r24	; 0x3e
		BCM_Status = BCM_RxDispatch();
    1f26:	0e 94 6e 07 	call	0xedc	; 0xedc <BCM_RxDispatch>
    1f2a:	8e af       	std	Y+62, r24	; 0x3e

		if(BCM_Status == BCM_RECEIVE_COMPLETE)
    1f2c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f2e:	85 30       	cpi	r24, 0x05	; 5
    1f30:	09 f0       	breq	.+2      	; 0x1f34 <main+0x146>
    1f32:	66 c2       	rjmp	.+1228   	; 0x2400 <main+0x612>
		{
			CLEAR_BIT(SREG,I);
    1f34:	af e5       	ldi	r26, 0x5F	; 95
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	ef e5       	ldi	r30, 0x5F	; 95
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	8f 77       	andi	r24, 0x7F	; 127
    1f40:	8c 93       	st	X, r24
			for(uint8 i = 0; i<(*ReceiveSize); i++)
    1f42:	19 ae       	std	Y+57, r1	; 0x39
    1f44:	52 c2       	rjmp	.+1188   	; 0x23ea <main+0x5fc>
			{
				switch(ReceiveData_Ptr[i])
    1f46:	89 ad       	ldd	r24, Y+57	; 0x39
    1f48:	28 2f       	mov	r18, r24
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	ce 01       	movw	r24, r28
    1f4e:	8f 54       	subi	r24, 0x4F	; 79
    1f50:	9f 4f       	sbci	r25, 0xFF	; 255
    1f52:	fc 01       	movw	r30, r24
    1f54:	e2 0f       	add	r30, r18
    1f56:	f3 1f       	adc	r31, r19
    1f58:	80 81       	ld	r24, Z
    1f5a:	a8 2f       	mov	r26, r24
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	cb 5e       	subi	r28, 0xEB	; 235
    1f60:	de 4f       	sbci	r29, 0xFE	; 254
    1f62:	b9 83       	std	Y+1, r27	; 0x01
    1f64:	a8 83       	st	Y, r26
    1f66:	c5 51       	subi	r28, 0x15	; 21
    1f68:	d1 40       	sbci	r29, 0x01	; 1
    1f6a:	cb 5e       	subi	r28, 0xEB	; 235
    1f6c:	de 4f       	sbci	r29, 0xFE	; 254
    1f6e:	e8 81       	ld	r30, Y
    1f70:	f9 81       	ldd	r31, Y+1	; 0x01
    1f72:	c5 51       	subi	r28, 0x15	; 21
    1f74:	d1 40       	sbci	r29, 0x01	; 1
    1f76:	e2 33       	cpi	r30, 0x32	; 50
    1f78:	f1 05       	cpc	r31, r1
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <main+0x190>
    1f7c:	ab c0       	rjmp	.+342    	; 0x20d4 <main+0x2e6>
    1f7e:	cb 5e       	subi	r28, 0xEB	; 235
    1f80:	de 4f       	sbci	r29, 0xFE	; 254
    1f82:	28 81       	ld	r18, Y
    1f84:	39 81       	ldd	r19, Y+1	; 0x01
    1f86:	c5 51       	subi	r28, 0x15	; 21
    1f88:	d1 40       	sbci	r29, 0x01	; 1
    1f8a:	23 33       	cpi	r18, 0x33	; 51
    1f8c:	31 05       	cpc	r19, r1
    1f8e:	54 f4       	brge	.+20     	; 0x1fa4 <main+0x1b6>
    1f90:	cb 5e       	subi	r28, 0xEB	; 235
    1f92:	de 4f       	sbci	r29, 0xFE	; 254
    1f94:	88 81       	ld	r24, Y
    1f96:	99 81       	ldd	r25, Y+1	; 0x01
    1f98:	c5 51       	subi	r28, 0x15	; 21
    1f9a:	d1 40       	sbci	r29, 0x01	; 1
    1f9c:	81 33       	cpi	r24, 0x31	; 49
    1f9e:	91 05       	cpc	r25, r1
    1fa0:	b1 f0       	breq	.+44     	; 0x1fce <main+0x1e0>
    1fa2:	20 c2       	rjmp	.+1088   	; 0x23e4 <main+0x5f6>
    1fa4:	cb 5e       	subi	r28, 0xEB	; 235
    1fa6:	de 4f       	sbci	r29, 0xFE	; 254
    1fa8:	a8 81       	ld	r26, Y
    1faa:	b9 81       	ldd	r27, Y+1	; 0x01
    1fac:	c5 51       	subi	r28, 0x15	; 21
    1fae:	d1 40       	sbci	r29, 0x01	; 1
    1fb0:	a3 33       	cpi	r26, 0x33	; 51
    1fb2:	b1 05       	cpc	r27, r1
    1fb4:	09 f4       	brne	.+2      	; 0x1fb8 <main+0x1ca>
    1fb6:	11 c1       	rjmp	.+546    	; 0x21da <main+0x3ec>
    1fb8:	cb 5e       	subi	r28, 0xEB	; 235
    1fba:	de 4f       	sbci	r29, 0xFE	; 254
    1fbc:	e8 81       	ld	r30, Y
    1fbe:	f9 81       	ldd	r31, Y+1	; 0x01
    1fc0:	c5 51       	subi	r28, 0x15	; 21
    1fc2:	d1 40       	sbci	r29, 0x01	; 1
    1fc4:	e4 33       	cpi	r30, 0x34	; 52
    1fc6:	f1 05       	cpc	r31, r1
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <main+0x1de>
    1fca:	8a c1       	rjmp	.+788    	; 0x22e0 <main+0x4f2>
    1fcc:	0b c2       	rjmp	.+1046   	; 0x23e4 <main+0x5f6>
				{
				case '1':
					DIO_WritePin(DIO_PIN12,HIGH);
    1fce:	8c e0       	ldi	r24, 0x0C	; 12
    1fd0:	61 e0       	ldi	r22, 0x01	; 1
    1fd2:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_WritePin>
					DIO_WritePin(DIO_PIN13,LOW);
    1fd6:	8d e0       	ldi	r24, 0x0D	; 13
    1fd8:	60 e0       	ldi	r22, 0x00	; 0
    1fda:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_WritePin>
					DIO_WritePin(DIO_PIN14,LOW);
    1fde:	8e e0       	ldi	r24, 0x0E	; 14
    1fe0:	60 e0       	ldi	r22, 0x00	; 0
    1fe2:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_WritePin>
					DIO_WritePin(DIO_PIN15,LOW);
    1fe6:	8f e0       	ldi	r24, 0x0F	; 15
    1fe8:	60 e0       	ldi	r22, 0x00	; 0
    1fea:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_WritePin>
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	a6 e9       	ldi	r26, 0x96	; 150
    1ff4:	b3 e4       	ldi	r27, 0x43	; 67
    1ff6:	8d ab       	std	Y+53, r24	; 0x35
    1ff8:	9e ab       	std	Y+54, r25	; 0x36
    1ffa:	af ab       	std	Y+55, r26	; 0x37
    1ffc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffe:	6d a9       	ldd	r22, Y+53	; 0x35
    2000:	7e a9       	ldd	r23, Y+54	; 0x36
    2002:	8f a9       	ldd	r24, Y+55	; 0x37
    2004:	98 ad       	ldd	r25, Y+56	; 0x38
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	4a ef       	ldi	r20, 0xFA	; 250
    200c:	54 e4       	ldi	r21, 0x44	; 68
    200e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	89 ab       	std	Y+49, r24	; 0x31
    2018:	9a ab       	std	Y+50, r25	; 0x32
    201a:	ab ab       	std	Y+51, r26	; 0x33
    201c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    201e:	69 a9       	ldd	r22, Y+49	; 0x31
    2020:	7a a9       	ldd	r23, Y+50	; 0x32
    2022:	8b a9       	ldd	r24, Y+51	; 0x33
    2024:	9c a9       	ldd	r25, Y+52	; 0x34
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e8       	ldi	r20, 0x80	; 128
    202c:	5f e3       	ldi	r21, 0x3F	; 63
    202e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2032:	88 23       	and	r24, r24
    2034:	2c f4       	brge	.+10     	; 0x2040 <main+0x252>
		__ticks = 1;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	98 ab       	std	Y+48, r25	; 0x30
    203c:	8f a7       	std	Y+47, r24	; 0x2f
    203e:	3f c0       	rjmp	.+126    	; 0x20be <main+0x2d0>
	else if (__tmp > 65535)
    2040:	69 a9       	ldd	r22, Y+49	; 0x31
    2042:	7a a9       	ldd	r23, Y+50	; 0x32
    2044:	8b a9       	ldd	r24, Y+51	; 0x33
    2046:	9c a9       	ldd	r25, Y+52	; 0x34
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	3f ef       	ldi	r19, 0xFF	; 255
    204c:	4f e7       	ldi	r20, 0x7F	; 127
    204e:	57 e4       	ldi	r21, 0x47	; 71
    2050:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2054:	18 16       	cp	r1, r24
    2056:	4c f5       	brge	.+82     	; 0x20aa <main+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2058:	6d a9       	ldd	r22, Y+53	; 0x35
    205a:	7e a9       	ldd	r23, Y+54	; 0x36
    205c:	8f a9       	ldd	r24, Y+55	; 0x37
    205e:	98 ad       	ldd	r25, Y+56	; 0x38
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e2       	ldi	r20, 0x20	; 32
    2066:	51 e4       	ldi	r21, 0x41	; 65
    2068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	bc 01       	movw	r22, r24
    2072:	cd 01       	movw	r24, r26
    2074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	98 ab       	std	Y+48, r25	; 0x30
    207e:	8f a7       	std	Y+47, r24	; 0x2f
    2080:	0f c0       	rjmp	.+30     	; 0x20a0 <main+0x2b2>
    2082:	88 ec       	ldi	r24, 0xC8	; 200
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	9e a7       	std	Y+46, r25	; 0x2e
    2088:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    208a:	8d a5       	ldd	r24, Y+45	; 0x2d
    208c:	9e a5       	ldd	r25, Y+46	; 0x2e
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <main+0x2a0>
    2092:	9e a7       	std	Y+46, r25	; 0x2e
    2094:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2096:	8f a5       	ldd	r24, Y+47	; 0x2f
    2098:	98 a9       	ldd	r25, Y+48	; 0x30
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	98 ab       	std	Y+48, r25	; 0x30
    209e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    20a2:	98 a9       	ldd	r25, Y+48	; 0x30
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	69 f7       	brne	.-38     	; 0x2082 <main+0x294>
    20a8:	9d c1       	rjmp	.+826    	; 0x23e4 <main+0x5f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20aa:	69 a9       	ldd	r22, Y+49	; 0x31
    20ac:	7a a9       	ldd	r23, Y+50	; 0x32
    20ae:	8b a9       	ldd	r24, Y+51	; 0x33
    20b0:	9c a9       	ldd	r25, Y+52	; 0x34
    20b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	98 ab       	std	Y+48, r25	; 0x30
    20bc:	8f a7       	std	Y+47, r24	; 0x2f
    20be:	8f a5       	ldd	r24, Y+47	; 0x2f
    20c0:	98 a9       	ldd	r25, Y+48	; 0x30
    20c2:	9c a7       	std	Y+44, r25	; 0x2c
    20c4:	8b a7       	std	Y+43, r24	; 0x2b
    20c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    20c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <main+0x2dc>
    20ce:	9c a7       	std	Y+44, r25	; 0x2c
    20d0:	8b a7       	std	Y+43, r24	; 0x2b
    20d2:	88 c1       	rjmp	.+784    	; 0x23e4 <main+0x5f6>
					_delay_ms(300);
					break;
				case '2':
					DIO_WritePin(DIO_PIN12,LOW);
    20d4:	8c e0       	ldi	r24, 0x0C	; 12
    20d6:	60 e0       	ldi	r22, 0x00	; 0
    20d8:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_WritePin>
					DIO_WritePin(DIO_PIN13,HIGH);
    20dc:	8d e0       	ldi	r24, 0x0D	; 13
    20de:	61 e0       	ldi	r22, 0x01	; 1
    20e0:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_WritePin>
					DIO_WritePin(DIO_PIN14,LOW);
    20e4:	8e e0       	ldi	r24, 0x0E	; 14
    20e6:	60 e0       	ldi	r22, 0x00	; 0
    20e8:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_WritePin>
					DIO_WritePin(DIO_PIN15,LOW);
    20ec:	8f e0       	ldi	r24, 0x0F	; 15
    20ee:	60 e0       	ldi	r22, 0x00	; 0
    20f0:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_WritePin>
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	a6 e9       	ldi	r26, 0x96	; 150
    20fa:	b3 e4       	ldi	r27, 0x43	; 67
    20fc:	8f a3       	std	Y+39, r24	; 0x27
    20fe:	98 a7       	std	Y+40, r25	; 0x28
    2100:	a9 a7       	std	Y+41, r26	; 0x29
    2102:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2104:	6f a1       	ldd	r22, Y+39	; 0x27
    2106:	78 a5       	ldd	r23, Y+40	; 0x28
    2108:	89 a5       	ldd	r24, Y+41	; 0x29
    210a:	9a a5       	ldd	r25, Y+42	; 0x2a
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	4a ef       	ldi	r20, 0xFA	; 250
    2112:	54 e4       	ldi	r21, 0x44	; 68
    2114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	8b a3       	std	Y+35, r24	; 0x23
    211e:	9c a3       	std	Y+36, r25	; 0x24
    2120:	ad a3       	std	Y+37, r26	; 0x25
    2122:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2124:	6b a1       	ldd	r22, Y+35	; 0x23
    2126:	7c a1       	ldd	r23, Y+36	; 0x24
    2128:	8d a1       	ldd	r24, Y+37	; 0x25
    212a:	9e a1       	ldd	r25, Y+38	; 0x26
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e8       	ldi	r20, 0x80	; 128
    2132:	5f e3       	ldi	r21, 0x3F	; 63
    2134:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2138:	88 23       	and	r24, r24
    213a:	2c f4       	brge	.+10     	; 0x2146 <main+0x358>
		__ticks = 1;
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	9a a3       	std	Y+34, r25	; 0x22
    2142:	89 a3       	std	Y+33, r24	; 0x21
    2144:	3f c0       	rjmp	.+126    	; 0x21c4 <main+0x3d6>
	else if (__tmp > 65535)
    2146:	6b a1       	ldd	r22, Y+35	; 0x23
    2148:	7c a1       	ldd	r23, Y+36	; 0x24
    214a:	8d a1       	ldd	r24, Y+37	; 0x25
    214c:	9e a1       	ldd	r25, Y+38	; 0x26
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	3f ef       	ldi	r19, 0xFF	; 255
    2152:	4f e7       	ldi	r20, 0x7F	; 127
    2154:	57 e4       	ldi	r21, 0x47	; 71
    2156:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    215a:	18 16       	cp	r1, r24
    215c:	4c f5       	brge	.+82     	; 0x21b0 <main+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215e:	6f a1       	ldd	r22, Y+39	; 0x27
    2160:	78 a5       	ldd	r23, Y+40	; 0x28
    2162:	89 a5       	ldd	r24, Y+41	; 0x29
    2164:	9a a5       	ldd	r25, Y+42	; 0x2a
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e2       	ldi	r20, 0x20	; 32
    216c:	51 e4       	ldi	r21, 0x41	; 65
    216e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	9a a3       	std	Y+34, r25	; 0x22
    2184:	89 a3       	std	Y+33, r24	; 0x21
    2186:	0f c0       	rjmp	.+30     	; 0x21a6 <main+0x3b8>
    2188:	88 ec       	ldi	r24, 0xC8	; 200
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	98 a3       	std	Y+32, r25	; 0x20
    218e:	8f 8f       	std	Y+31, r24	; 0x1f
    2190:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2192:	98 a1       	ldd	r25, Y+32	; 0x20
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <main+0x3a6>
    2198:	98 a3       	std	Y+32, r25	; 0x20
    219a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219c:	89 a1       	ldd	r24, Y+33	; 0x21
    219e:	9a a1       	ldd	r25, Y+34	; 0x22
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	9a a3       	std	Y+34, r25	; 0x22
    21a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a6:	89 a1       	ldd	r24, Y+33	; 0x21
    21a8:	9a a1       	ldd	r25, Y+34	; 0x22
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	69 f7       	brne	.-38     	; 0x2188 <main+0x39a>
    21ae:	1a c1       	rjmp	.+564    	; 0x23e4 <main+0x5f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b0:	6b a1       	ldd	r22, Y+35	; 0x23
    21b2:	7c a1       	ldd	r23, Y+36	; 0x24
    21b4:	8d a1       	ldd	r24, Y+37	; 0x25
    21b6:	9e a1       	ldd	r25, Y+38	; 0x26
    21b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	9a a3       	std	Y+34, r25	; 0x22
    21c2:	89 a3       	std	Y+33, r24	; 0x21
    21c4:	89 a1       	ldd	r24, Y+33	; 0x21
    21c6:	9a a1       	ldd	r25, Y+34	; 0x22
    21c8:	9e 8f       	std	Y+30, r25	; 0x1e
    21ca:	8d 8f       	std	Y+29, r24	; 0x1d
    21cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	f1 f7       	brne	.-4      	; 0x21d0 <main+0x3e2>
    21d4:	9e 8f       	std	Y+30, r25	; 0x1e
    21d6:	8d 8f       	std	Y+29, r24	; 0x1d
    21d8:	05 c1       	rjmp	.+522    	; 0x23e4 <main+0x5f6>
					_delay_ms(300);
					break;
				case '3':
					DIO_WritePin(DIO_PIN12,LOW);
    21da:	8c e0       	ldi	r24, 0x0C	; 12
    21dc:	60 e0       	ldi	r22, 0x00	; 0
    21de:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_WritePin>
					DIO_WritePin(DIO_PIN13,LOW);
    21e2:	8d e0       	ldi	r24, 0x0D	; 13
    21e4:	60 e0       	ldi	r22, 0x00	; 0
    21e6:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_WritePin>
					DIO_WritePin(DIO_PIN14,HIGH);
    21ea:	8e e0       	ldi	r24, 0x0E	; 14
    21ec:	61 e0       	ldi	r22, 0x01	; 1
    21ee:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_WritePin>
					DIO_WritePin(DIO_PIN15,LOW);
    21f2:	8f e0       	ldi	r24, 0x0F	; 15
    21f4:	60 e0       	ldi	r22, 0x00	; 0
    21f6:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_WritePin>
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	a6 e9       	ldi	r26, 0x96	; 150
    2200:	b3 e4       	ldi	r27, 0x43	; 67
    2202:	89 8f       	std	Y+25, r24	; 0x19
    2204:	9a 8f       	std	Y+26, r25	; 0x1a
    2206:	ab 8f       	std	Y+27, r26	; 0x1b
    2208:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220a:	69 8d       	ldd	r22, Y+25	; 0x19
    220c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    220e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2210:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	4a ef       	ldi	r20, 0xFA	; 250
    2218:	54 e4       	ldi	r21, 0x44	; 68
    221a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	8d 8b       	std	Y+21, r24	; 0x15
    2224:	9e 8b       	std	Y+22, r25	; 0x16
    2226:	af 8b       	std	Y+23, r26	; 0x17
    2228:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    222a:	6d 89       	ldd	r22, Y+21	; 0x15
    222c:	7e 89       	ldd	r23, Y+22	; 0x16
    222e:	8f 89       	ldd	r24, Y+23	; 0x17
    2230:	98 8d       	ldd	r25, Y+24	; 0x18
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e8       	ldi	r20, 0x80	; 128
    2238:	5f e3       	ldi	r21, 0x3F	; 63
    223a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    223e:	88 23       	and	r24, r24
    2240:	2c f4       	brge	.+10     	; 0x224c <main+0x45e>
		__ticks = 1;
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	9c 8b       	std	Y+20, r25	; 0x14
    2248:	8b 8b       	std	Y+19, r24	; 0x13
    224a:	3f c0       	rjmp	.+126    	; 0x22ca <main+0x4dc>
	else if (__tmp > 65535)
    224c:	6d 89       	ldd	r22, Y+21	; 0x15
    224e:	7e 89       	ldd	r23, Y+22	; 0x16
    2250:	8f 89       	ldd	r24, Y+23	; 0x17
    2252:	98 8d       	ldd	r25, Y+24	; 0x18
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	3f ef       	ldi	r19, 0xFF	; 255
    2258:	4f e7       	ldi	r20, 0x7F	; 127
    225a:	57 e4       	ldi	r21, 0x47	; 71
    225c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2260:	18 16       	cp	r1, r24
    2262:	4c f5       	brge	.+82     	; 0x22b6 <main+0x4c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2264:	69 8d       	ldd	r22, Y+25	; 0x19
    2266:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2268:	8b 8d       	ldd	r24, Y+27	; 0x1b
    226a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e2       	ldi	r20, 0x20	; 32
    2272:	51 e4       	ldi	r21, 0x41	; 65
    2274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	bc 01       	movw	r22, r24
    227e:	cd 01       	movw	r24, r26
    2280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	9c 8b       	std	Y+20, r25	; 0x14
    228a:	8b 8b       	std	Y+19, r24	; 0x13
    228c:	0f c0       	rjmp	.+30     	; 0x22ac <main+0x4be>
    228e:	88 ec       	ldi	r24, 0xC8	; 200
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	9a 8b       	std	Y+18, r25	; 0x12
    2294:	89 8b       	std	Y+17, r24	; 0x11
    2296:	89 89       	ldd	r24, Y+17	; 0x11
    2298:	9a 89       	ldd	r25, Y+18	; 0x12
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	f1 f7       	brne	.-4      	; 0x229a <main+0x4ac>
    229e:	9a 8b       	std	Y+18, r25	; 0x12
    22a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a2:	8b 89       	ldd	r24, Y+19	; 0x13
    22a4:	9c 89       	ldd	r25, Y+20	; 0x14
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	9c 8b       	std	Y+20, r25	; 0x14
    22aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ac:	8b 89       	ldd	r24, Y+19	; 0x13
    22ae:	9c 89       	ldd	r25, Y+20	; 0x14
    22b0:	00 97       	sbiw	r24, 0x00	; 0
    22b2:	69 f7       	brne	.-38     	; 0x228e <main+0x4a0>
    22b4:	97 c0       	rjmp	.+302    	; 0x23e4 <main+0x5f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b6:	6d 89       	ldd	r22, Y+21	; 0x15
    22b8:	7e 89       	ldd	r23, Y+22	; 0x16
    22ba:	8f 89       	ldd	r24, Y+23	; 0x17
    22bc:	98 8d       	ldd	r25, Y+24	; 0x18
    22be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	9c 8b       	std	Y+20, r25	; 0x14
    22c8:	8b 8b       	std	Y+19, r24	; 0x13
    22ca:	8b 89       	ldd	r24, Y+19	; 0x13
    22cc:	9c 89       	ldd	r25, Y+20	; 0x14
    22ce:	98 8b       	std	Y+16, r25	; 0x10
    22d0:	8f 87       	std	Y+15, r24	; 0x0f
    22d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    22d4:	98 89       	ldd	r25, Y+16	; 0x10
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	f1 f7       	brne	.-4      	; 0x22d6 <main+0x4e8>
    22da:	98 8b       	std	Y+16, r25	; 0x10
    22dc:	8f 87       	std	Y+15, r24	; 0x0f
    22de:	82 c0       	rjmp	.+260    	; 0x23e4 <main+0x5f6>
					_delay_ms(300);
					break;
				case '4':
					DIO_WritePin(DIO_PIN12,LOW);
    22e0:	8c e0       	ldi	r24, 0x0C	; 12
    22e2:	60 e0       	ldi	r22, 0x00	; 0
    22e4:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_WritePin>
					DIO_WritePin(DIO_PIN13,LOW);
    22e8:	8d e0       	ldi	r24, 0x0D	; 13
    22ea:	60 e0       	ldi	r22, 0x00	; 0
    22ec:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_WritePin>
					DIO_WritePin(DIO_PIN14,LOW);
    22f0:	8e e0       	ldi	r24, 0x0E	; 14
    22f2:	60 e0       	ldi	r22, 0x00	; 0
    22f4:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_WritePin>
					DIO_WritePin(DIO_PIN15,HIGH);
    22f8:	8f e0       	ldi	r24, 0x0F	; 15
    22fa:	61 e0       	ldi	r22, 0x01	; 1
    22fc:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_WritePin>
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	a6 e9       	ldi	r26, 0x96	; 150
    2306:	b3 e4       	ldi	r27, 0x43	; 67
    2308:	8b 87       	std	Y+11, r24	; 0x0b
    230a:	9c 87       	std	Y+12, r25	; 0x0c
    230c:	ad 87       	std	Y+13, r26	; 0x0d
    230e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2310:	6b 85       	ldd	r22, Y+11	; 0x0b
    2312:	7c 85       	ldd	r23, Y+12	; 0x0c
    2314:	8d 85       	ldd	r24, Y+13	; 0x0d
    2316:	9e 85       	ldd	r25, Y+14	; 0x0e
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	4a ef       	ldi	r20, 0xFA	; 250
    231e:	54 e4       	ldi	r21, 0x44	; 68
    2320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	8f 83       	std	Y+7, r24	; 0x07
    232a:	98 87       	std	Y+8, r25	; 0x08
    232c:	a9 87       	std	Y+9, r26	; 0x09
    232e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2330:	6f 81       	ldd	r22, Y+7	; 0x07
    2332:	78 85       	ldd	r23, Y+8	; 0x08
    2334:	89 85       	ldd	r24, Y+9	; 0x09
    2336:	9a 85       	ldd	r25, Y+10	; 0x0a
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e8       	ldi	r20, 0x80	; 128
    233e:	5f e3       	ldi	r21, 0x3F	; 63
    2340:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2344:	88 23       	and	r24, r24
    2346:	2c f4       	brge	.+10     	; 0x2352 <main+0x564>
		__ticks = 1;
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	9e 83       	std	Y+6, r25	; 0x06
    234e:	8d 83       	std	Y+5, r24	; 0x05
    2350:	3f c0       	rjmp	.+126    	; 0x23d0 <main+0x5e2>
	else if (__tmp > 65535)
    2352:	6f 81       	ldd	r22, Y+7	; 0x07
    2354:	78 85       	ldd	r23, Y+8	; 0x08
    2356:	89 85       	ldd	r24, Y+9	; 0x09
    2358:	9a 85       	ldd	r25, Y+10	; 0x0a
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	3f ef       	ldi	r19, 0xFF	; 255
    235e:	4f e7       	ldi	r20, 0x7F	; 127
    2360:	57 e4       	ldi	r21, 0x47	; 71
    2362:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2366:	18 16       	cp	r1, r24
    2368:	4c f5       	brge	.+82     	; 0x23bc <main+0x5ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236a:	6b 85       	ldd	r22, Y+11	; 0x0b
    236c:	7c 85       	ldd	r23, Y+12	; 0x0c
    236e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2370:	9e 85       	ldd	r25, Y+14	; 0x0e
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e2       	ldi	r20, 0x20	; 32
    2378:	51 e4       	ldi	r21, 0x41	; 65
    237a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	bc 01       	movw	r22, r24
    2384:	cd 01       	movw	r24, r26
    2386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	9e 83       	std	Y+6, r25	; 0x06
    2390:	8d 83       	std	Y+5, r24	; 0x05
    2392:	0f c0       	rjmp	.+30     	; 0x23b2 <main+0x5c4>
    2394:	88 ec       	ldi	r24, 0xC8	; 200
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	9c 83       	std	Y+4, r25	; 0x04
    239a:	8b 83       	std	Y+3, r24	; 0x03
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	9c 81       	ldd	r25, Y+4	; 0x04
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <main+0x5b2>
    23a4:	9c 83       	std	Y+4, r25	; 0x04
    23a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	9e 83       	std	Y+6, r25	; 0x06
    23b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b2:	8d 81       	ldd	r24, Y+5	; 0x05
    23b4:	9e 81       	ldd	r25, Y+6	; 0x06
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	69 f7       	brne	.-38     	; 0x2394 <main+0x5a6>
    23ba:	14 c0       	rjmp	.+40     	; 0x23e4 <main+0x5f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23bc:	6f 81       	ldd	r22, Y+7	; 0x07
    23be:	78 85       	ldd	r23, Y+8	; 0x08
    23c0:	89 85       	ldd	r24, Y+9	; 0x09
    23c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	9e 83       	std	Y+6, r25	; 0x06
    23ce:	8d 83       	std	Y+5, r24	; 0x05
    23d0:	8d 81       	ldd	r24, Y+5	; 0x05
    23d2:	9e 81       	ldd	r25, Y+6	; 0x06
    23d4:	9a 83       	std	Y+2, r25	; 0x02
    23d6:	89 83       	std	Y+1, r24	; 0x01
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	9a 81       	ldd	r25, Y+2	; 0x02
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	f1 f7       	brne	.-4      	; 0x23dc <main+0x5ee>
    23e0:	9a 83       	std	Y+2, r25	; 0x02
    23e2:	89 83       	std	Y+1, r24	; 0x01
		BCM_Status = BCM_RxDispatch();

		if(BCM_Status == BCM_RECEIVE_COMPLETE)
		{
			CLEAR_BIT(SREG,I);
			for(uint8 i = 0; i<(*ReceiveSize); i++)
    23e4:	89 ad       	ldd	r24, Y+57	; 0x39
    23e6:	8f 5f       	subi	r24, 0xFF	; 255
    23e8:	89 af       	std	Y+57, r24	; 0x39
    23ea:	89 ad       	ldd	r24, Y+57	; 0x39
    23ec:	28 2f       	mov	r18, r24
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	ea ad       	ldd	r30, Y+58	; 0x3a
    23f2:	fb ad       	ldd	r31, Y+59	; 0x3b
    23f4:	80 81       	ld	r24, Z
    23f6:	91 81       	ldd	r25, Z+1	; 0x01
    23f8:	28 17       	cp	r18, r24
    23fa:	39 07       	cpc	r19, r25
    23fc:	08 f4       	brcc	.+2      	; 0x2400 <main+0x612>
    23fe:	a3 cd       	rjmp	.-1210   	; 0x1f46 <main+0x158>
				}

			}
		}

		CPU_SleepEnable();
    2400:	0e 94 0a 09 	call	0x1214	; 0x1214 <CPU_SleepEnable>
    2404:	8d cd       	rjmp	.-1254   	; 0x1f20 <main+0x132>

00002406 <__prologue_saves__>:
    2406:	2f 92       	push	r2
    2408:	3f 92       	push	r3
    240a:	4f 92       	push	r4
    240c:	5f 92       	push	r5
    240e:	6f 92       	push	r6
    2410:	7f 92       	push	r7
    2412:	8f 92       	push	r8
    2414:	9f 92       	push	r9
    2416:	af 92       	push	r10
    2418:	bf 92       	push	r11
    241a:	cf 92       	push	r12
    241c:	df 92       	push	r13
    241e:	ef 92       	push	r14
    2420:	ff 92       	push	r15
    2422:	0f 93       	push	r16
    2424:	1f 93       	push	r17
    2426:	cf 93       	push	r28
    2428:	df 93       	push	r29
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	ca 1b       	sub	r28, r26
    2430:	db 0b       	sbc	r29, r27
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	f8 94       	cli
    2436:	de bf       	out	0x3e, r29	; 62
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	cd bf       	out	0x3d, r28	; 61
    243c:	09 94       	ijmp

0000243e <__epilogue_restores__>:
    243e:	2a 88       	ldd	r2, Y+18	; 0x12
    2440:	39 88       	ldd	r3, Y+17	; 0x11
    2442:	48 88       	ldd	r4, Y+16	; 0x10
    2444:	5f 84       	ldd	r5, Y+15	; 0x0f
    2446:	6e 84       	ldd	r6, Y+14	; 0x0e
    2448:	7d 84       	ldd	r7, Y+13	; 0x0d
    244a:	8c 84       	ldd	r8, Y+12	; 0x0c
    244c:	9b 84       	ldd	r9, Y+11	; 0x0b
    244e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2450:	b9 84       	ldd	r11, Y+9	; 0x09
    2452:	c8 84       	ldd	r12, Y+8	; 0x08
    2454:	df 80       	ldd	r13, Y+7	; 0x07
    2456:	ee 80       	ldd	r14, Y+6	; 0x06
    2458:	fd 80       	ldd	r15, Y+5	; 0x05
    245a:	0c 81       	ldd	r16, Y+4	; 0x04
    245c:	1b 81       	ldd	r17, Y+3	; 0x03
    245e:	aa 81       	ldd	r26, Y+2	; 0x02
    2460:	b9 81       	ldd	r27, Y+1	; 0x01
    2462:	ce 0f       	add	r28, r30
    2464:	d1 1d       	adc	r29, r1
    2466:	0f b6       	in	r0, 0x3f	; 63
    2468:	f8 94       	cli
    246a:	de bf       	out	0x3e, r29	; 62
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	cd bf       	out	0x3d, r28	; 61
    2470:	ed 01       	movw	r28, r26
    2472:	08 95       	ret

00002474 <_exit>:
    2474:	f8 94       	cli

00002476 <__stop_program>:
    2476:	ff cf       	rjmp	.-2      	; 0x2476 <__stop_program>
